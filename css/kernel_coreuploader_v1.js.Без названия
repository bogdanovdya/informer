; /* /bitrix/js/main/core/core_uploader/common.js?153814486515583*/
; /* /bitrix/js/main/core/core_uploader/uploader.js?153814643259043*/
; /* /bitrix/js/main/core/core_uploader/file.js?153943333138322*/
; /* /bitrix/js/main/core/core_uploader/queue.min.js?151801858511002*/

; /* Start:"a:4:{s:4:"full";s:60:"/bitrix/js/main/core/core_uploader/common.js?153814486515583";s:6:"source";s:44:"/bitrix/js/main/core/core_uploader/common.js";s:3:"min";s:0:"";s:3:"map";s:0:"";}"*/
;(function(window){
	if (window.BX["UploaderUtils"])
		return false;
	var BX = window.BX;
	BX.UploaderLog = [];
	BX.UploaderDebug = false;
	var statuses = { "new" : 0, ready : 1, preparing : 2, inprogress : 3, done : 4, failed : 5, stopped : 6, changed : 7, uploaded : 8};
	BX.UploaderUtils = {
		statuses : statuses,
		getId : function() { return (new Date().valueOf() + Math.round(Math.random() * 1000000)); },
		log : function(){
			if (BX.UploaderDebug === true)
			{
				console.log(arguments);
			}
			else
			{
				BX.UploaderLog.push(arguments);
			}
		},
		Hash : (function(){
			var d = function() {
				this.length = 0;
				this.items = {};
				this.order = [];
				var i;
				if (arguments.length == 1 && BX.type.isArray(arguments[0]) && arguments[0].length > 0)
				{
					var data = arguments[0];
					for (i = 0; i < data.length; i++)
					{
						if (data[i] && typeof data[i] == "object" && data[i]["id"])
						{
							this.setItem(data[i]["id"], data[i]);
						}
					}
				}
				else
				{
					for (i = 0; i < arguments.length; i += 2)
						this.setItem(arguments[i], arguments[i + 1]);
				}
			};
			d.prototype = {
				getIds : function()
				{
					return this.order;
				},
				getQueue : function(id)
				{
					id += '';
					return BX.util.array_search(id, this.order);
				},
				getByOrder : function(order)
				{
					return this.getItem(this.order[order]);
				},
				removeItem : function(in_key)
				{
					in_key += '';
					var tmp_value, number;
					if (typeof(this.items[in_key]) != 'undefined') {
						tmp_value = this.items[in_key];
						number = this.getQueue(in_key);
						this.pointer -= (this.pointer >= number ? 1 : 0);
						delete this.items[in_key];
						this.order = BX.util.deleteFromArray(this.order, number);
						this.length = this.order.length;

					}
					return tmp_value;
				},

				getItem : function(in_key) {
					in_key += '';
					return this.items[in_key];
				},

				unshiftItem : function(in_key, in_value)
				{
					in_key += '';
					if (typeof(in_value) != 'undefined')
					{
						if (typeof(this.items[in_key]) == 'undefined')
						{
							this.order.unshift(in_key);
							this.length = this.order.length;
						}
						this.items[in_key] = in_value;
					}
					return in_value;
				},
				setItem : function(in_key, in_value)
				{
					in_key += '';
					if (typeof(in_value) != 'undefined')
					{
						if (typeof(this.items[in_key]) == 'undefined')
						{
							this.order.push(in_key);
							this.length = this.order.length;
						}
						this.items[in_key] = in_value;
					}
					return in_value;
				},

				hasItem : function(in_key)
				{
					in_key += '';
					return typeof(this.items[in_key]) != 'undefined';
				},
				insertBeforeItem : function(in_key, in_value, after_key)
				{
					in_key += '';
					if (typeof(in_value) != 'undefined')
					{
						if (typeof(this.items[in_key]) == 'undefined')
						{
							this.order.splice(this.getQueue(after_key), 0, in_key);
							this.length = this.order.length;
						}
						this.items[in_key] = in_value;
					}
					return in_value;
				},
				getFirst : function()
				{
					var in_key, item = null;
					for (var ii = 0; ii < this.order.length; ii++)
					{
						in_key = this.order[ii];
						if (!!in_key && this.hasItem(in_key))
						{
							item = this.getItem(in_key);
							break;
						}
					}
					return item;
				},
				getNext : function()
				{
					this.pointer = (0 <= this.pointer && this.pointer < this.order.length ? this.pointer : -1);
					var res = this.getItem(this.order[this.pointer + 1]);
					if (!!res)
						this.pointer++;
					else
						this.pointer = -1;
					return res;
				},
				getPrev : function()
				{
					this.pointer = (0 <= this.pointer && this.pointer < this.order.length ? this.pointer : 0);
					var res = this.getItem(this.order[this.pointer - 1]);
					if (!!res)
						this.pointer--;
					return res;
				},
				reset : function()
				{
					this.pointer = -1;
				},
				setPointer : function(in_key)
				{
					this.pointer = this.getQueue(in_key);
					return this.pointer;
				},
				getLast : function()
				{
					var in_key, item = null;
					for (var ii = this.order.length; ii >=0; ii--)
					{
						in_key = this.order[ii];
						if (!!in_key && this.hasItem(in_key))
						{
							item = this.getItem(in_key);
							break;
						}
					}
					return item;
				}
			};
			return d;
		})(),
		getFileNameOnly : function (name)
		{
			var delimiter = "\\", start = name.lastIndexOf(delimiter), finish = name.length;
			if (start == -1)
			{
				delimiter = "/";
				start = name.lastIndexOf(delimiter);
			}
			if ((start + 1) == name.length)
			{
				finish = start;
				start = name.substring(0, finish).lastIndexOf(delimiter);
			}
			name = name.substring(start + 1, finish);
			if (delimiter == "/" && name.indexOf("?") > 0)
			{
				name = name.substring(0, name.indexOf("?"));
			}

			if (name == '')
				name = 'noname';
			return name;
		},
		isImageExt : function(ext)
		{
			return (BX.message('bxImageExtensions') && BX.type.isNotEmptyString(ext) ?
				(new RegExp('(?:^|\\W)(' + ext + ')(?:\\W|$)', 'gi')).test(BX.message('bxImageExtensions')) :
				false
			);
		},
		isImage : function(name, type, size)
		{
			size = BX.type.isNumber(size) ? size : (BX.type.isNotEmptyString(size) && !(/[\D]+/gi.test(size)) ? parseInt(size) : null);
			return (
				(type === null || (type || '').indexOf("image/") === 0) &&
				(size === null || (size < 20 * 1024 * 1024)) &&
				BX.UploaderUtils.isImageExt((name || '').lastIndexOf('.') > 0 ? name.substr(name.lastIndexOf('.')+1).toLowerCase() : ''));
		},
		scaleImage : function(arSourceSize, arSize, resizeType)
		{
			var sourceImageWidth = parseInt(arSourceSize["width"]), sourceImageHeight = parseInt(arSourceSize["height"]);
			resizeType = (!resizeType && !!arSize["type"] ? arSize["type"] : resizeType);
			arSize = (!!arSize ? arSize : {});
			arSize.width = parseInt(!!arSize.width ? arSize.width : 0);
			arSize.height = parseInt(!!arSize.height ? arSize.height : 0);

			var res = {
					bNeedCreatePicture : false,
					source : {x : 0, y : 0, width : 0, height : 0},
					destin : {x : 0, y : 0, width : 0, height : 0}
			}, width, height;

			if (!(sourceImageWidth > 0 || sourceImageHeight > 0))
			{
				BX.DoNothing();
			}
			else
			{
				if (!BX.type.isNotEmptyString(resizeType))
				{
					resizeType = "inscribed";
				}


				var ResizeCoeff, iResizeCoeff;

				if (resizeType.indexOf("proportional") >= 0)
				{
					width = Math.max(sourceImageWidth, sourceImageHeight);
					height = Math.min(sourceImageWidth, sourceImageHeight);
				}
				else
				{
					width = sourceImageWidth;
					height = sourceImageHeight;
				}
				if (resizeType == "exact")
				{
					var
						ratio = (sourceImageWidth / sourceImageHeight < arSize["width"] / arSize["height"] ? arSize["width"] / sourceImageWidth : arSize["height"] / sourceImageHeight),
						x = Math.max(0, Math.round(sourceImageWidth / 2 - (arSize["width"] / 2) / ratio)),
						y = Math.max(0, Math.round(sourceImageHeight / 2 - (arSize["height"] / 2) / ratio));

					res.bNeedCreatePicture = true;
					res.coeff = ratio;

					res.destin["width"] = arSize["width"];
					res.destin["height"] = arSize["height"];

					res.source["x"] = x;
					res.source["y"] = y;
					res.source["width"] = Math.round(arSize["width"] / ratio, 0);
					res.source["height"] = Math.round(arSize["height"] / ratio, 0);
				}
				else
				{
					if (resizeType == "circumscribed")
					{
						ResizeCoeff = {
							width : (width > 0 ? arSize["width"] / width : 1),
							height: (height > 0 ? arSize["height"] / height : 1)};

						iResizeCoeff = Math.max(ResizeCoeff["width"], ResizeCoeff["height"], 1);
					}
					else
					{
						ResizeCoeff = {
							width : (width > 0 ? arSize["width"] / width : 1),
							height: (height > 0 ? arSize["height"] / height : 1)};

						iResizeCoeff = Math.min(ResizeCoeff["width"], ResizeCoeff["height"], 1);
						iResizeCoeff = (0 < iResizeCoeff ? iResizeCoeff : 1);
					}
					res.bNeedCreatePicture = (iResizeCoeff != 1);
					res.coeff = iResizeCoeff;
					res.destin["width"] = Math.max(1, parseInt(iResizeCoeff * sourceImageWidth));
					res.destin["height"] = Math.max(1, parseInt(iResizeCoeff * sourceImageHeight));

					res.source["x"] = 0;
					res.source["y"] = 0;
					res.source["width"] = sourceImageWidth;
					res.source["height"] = sourceImageHeight;
				}

			}
			return res;
		},
		dataURLToBlob : function(dataURL)
		{
			var marker = ';base64,', parts, contentType, raw, rawLength;
			if(dataURL.indexOf(marker) == -1) {
				parts = dataURL.split(',');
				contentType = parts[0].split(':')[1];
				raw = parts[1];
				return new Blob([raw], {type: contentType});
			}

			parts = dataURL.split(marker);
			contentType = parts[0].split(':')[1];
			raw = window.atob(parts[1]);
			rawLength = raw.length;

			var uInt8Array = new Uint8Array(rawLength);

			for(var i = 0; i < rawLength; ++i) {
				uInt8Array[i] = raw.charCodeAt(i);
			}

			return new Blob([uInt8Array], {type: contentType});
		},
		sizeof : function(obj) {
			var size = 0, key;
			for (key in obj) {
				if (obj.hasOwnProperty(key))
				{
					size += key.length;
					if (typeof obj[key] == "object")
					{
						if (obj[key] === null)
							BX.DoNothing();
						else if (obj[key]["size"] > 0)
							size += obj[key].size;
						else
							size += BX.UploaderUtils.sizeof(obj[key]);
					}
					else if (typeof obj[key] == "number")
					{
						size += obj[key].toString().length;
					}
					else if (!!obj[key] && obj[key].length > 0)
					{
						size += obj[key].length;
					}
				}
			}
			return size;
		},
		FormToArray : function(form, data)
		{
			return BX.ajax.prepareForm(form, data);
		},
		getFormattedSize : function (size, precision)
		{
			var a = ["b", "Kb", "Mb", "Gb", "Tb"], pos = 0;
			while(size >= 1024 && pos < 4)
			{
				size /= 1024;
				pos++;
			}
			return (Math.round(size * (precision > 0 ? precision * 10 : 1) ) / (precision > 0 ? precision * 10 : 1)) +
				" " + BX.message("FILE_SIZE_" + a[pos]);
		},
		bindEvents : function(obj, event, func)
		{
			var funcs = [], ii;
			if (typeof func == "string")
			{
				eval('funcs.push(' + func + ');');
			}
			else if (!!func["length"] && func["length"] > 0)
			{
				for(ii = 0; ii < func.length; ii++)
				{
					if (typeof func[ii] == "string")
						eval('funcs.push(' + func[ii] + ');');
					else
						funcs.push(func[ii]);
				}
			}
			else
				funcs.push(func);
			if (funcs.length > 0)
			{
				for (ii = 0; ii < funcs.length; ii++)
				{
					BX.addCustomEvent(obj, event, funcs[ii]);
				}
			}

		},
		applyFilePart : function(file, blob)
		{
			if (BX.type.isDomNode(file))
			{
				file.uploadStatus = statuses.done;
			}
			else if (file == blob)
			{
				file.uploadStatus = statuses.done;
			}
			else if (file.blobed === true)
			{
				file.uploadStatus = ((file.package + 1) >= file.packages ? statuses.done : statuses.inprogress);
				if (file.uploadStatus == statuses.inprogress)
					file.package++;
			}
			return true;
		},
		getFilePart : function(file, firstChunk, MaxFilesize)
		{
			var blob, chunkSize = MaxFilesize, start, end, chunk = null;
			if (BX.type.isDomNode(file))
			{
//				file.uploadStatus = statuses.done;
				blob = file;
			}
			else if (!(MaxFilesize > 0 && file.size > MaxFilesize))
			{
//				file.uploadStatus = statuses.done;
				blob = file;
			}
			else if (window.Blob || window.MozBlobBuilder || window.WebKitBlobBuilder || window.BlobBuilder)
			{
				file.blobed = true;
				if (file.uploadStatus == statuses.inprogress)
				{
					start = file.firstChunk + (file.package - 1) * chunkSize;
					end = start + chunkSize;
				}
				else
				{
					firstChunk = (0 < firstChunk && firstChunk < chunkSize ? firstChunk : chunkSize);
					file.firstChunk = firstChunk;
					file.packages = 1 + Math.ceil((file.size-file.firstChunk) / chunkSize);
					file.package = 0;
					start = 0;
					end = file.firstChunk;
				}

				if('mozSlice' in file)
					blob = file.mozSlice(start, end, file.type);
				else if ('webkitSlice' in file)
					blob = file.webkitSlice(start, end, file.type);
				else if ('slice' in file)
					blob = file.slice(start, end, file.type);
				else
					blob = file.Slice(start, end, file.type);

				for (var ii in file)
				{
					if (file.hasOwnProperty(ii))
					{
						blob[ii] = file[ii];
					}
				}
				blob["name"] = file["name"];
				blob["start"] = start;
			}
			return blob;
		},
		makeAnArray : function(file, data)
		{
			file = (!!file ? file : {files : [], props : {}});
			var ii;
			for (var jj in data)
			{
				if (data.hasOwnProperty(jj))
				{
					if (typeof data[jj] == "object" && data[jj].length > 0)
					{
						file[jj] = (!!file[jj] ? file[jj] : []);
						for (ii=0; ii<data[jj].length; ii++)
						{
							file[jj].push(data[jj][ii]);
						}
					}
					else
					{

						for (ii in data[jj])
						{
							if (data[jj].hasOwnProperty(ii))
							{
								file[jj] = (!!file[jj] ? file[jj] : {});
								file[jj][ii] = data[jj][ii];
							}
						}
					}
				}
			}
			return file;
		},
		appendToForm : function(fd, key, val)
		{
			if (!!val && typeof val == "object")
			{
				for (var ii in val)
				{
					if (val.hasOwnProperty(ii))
					{
						BX.UploaderUtils.appendToForm(fd, key + '[' + ii + ']', val[ii]);
					}
				}
			}
			else
			{
				fd.append(key, (!!val ? val : ''));
			}
		},
		FormData : function()
		{
			return new (BX.Uploader.getInstanceName() == "BX.UploaderSimple" ? FormDataLocal : window.FormData);
		},
		prepareData : function(arData)
		{
			var data = {};
			if (null != arData)
			{
				if(typeof arData == 'object')
				{
					for(var i in arData)
					{
						if (arData.hasOwnProperty(i))
						{
							var name = BX.util.urlencode(i);
							if(typeof arData[i] == 'object')
								data[name] = BX.UploaderUtils.prepareData(arData[i]);
							else
								data[name] = BX.util.urlencode(arData[i]);
						}
					}
				}
				else
					data = BX.util.urlencode(arData);
			}
			return data;
		}
	};
	var FormDataLocal = function()
	{
		var uniqueID;
		do {
			uniqueID = Math.floor(Math.random() * 99999);
		} while(BX("form-" + uniqueID));
		this.local = true;
		this.form = BX.create("FORM", {
			props: {
				id: "form-" + uniqueID,
				method: "POST",
				enctype: "multipart/form-data",
				encoding: "multipart/form-data"
			},
			style: {display: "none"}
		});
		document.body.appendChild(this.form);
	};
	FormDataLocal.prototype = {
		append : function(name, val)
		{
			if (BX.type.isDomNode(val))
			{
				this.form.appendChild(val);
			}
			else
			{
				this.form.appendChild(
					BX.create("INPUT", {
							props : {
								type : "hidden",
								name : name,
								value : val
							}
						}
					)
				);
			}
		}
	};
	BX.UploaderUtils.slice = function(file, start, end)
	{
		var blob = null;
		if('mozSlice' in file)
			blob = file.mozSlice(start, end);
		else if ('webkitSlice' in file)
			blob = file.webkitSlice(start, end);
		else if ('slice' in file)
			blob = file.slice(start, end);
		else
			blob = file.Slice(start, end, file.type);
		return blob;
	};
	BX.UploaderUtils.readFile = function (file, callback, method)
	{
		if (window["FileReader"])
		{
			var fileReader = new FileReader();
			fileReader.onload = fileReader.onerror = callback;
			method = (method || 'readAsDataURL');
			if (fileReader[method])
			{
				fileReader[method](file);
				return fileReader;
			}
		}
		return false;
	};
}(window));

/* End */
;
; /* Start:"a:4:{s:4:"full";s:62:"/bitrix/js/main/core/core_uploader/uploader.js?153814643259043";s:6:"source";s:46:"/bitrix/js/main/core/core_uploader/uploader.js";s:3:"min";s:0:"";s:3:"map";s:0:"";}"*/
;(function(window){

	if (window.BX["Uploader"])
		return;
	var
		BX = window.BX,
		statuses = { "new" : 0, ready : 1, preparing : 2, inprogress : 3, done : 4, failed : 5, error : 5.2, stopped : 6, changed : 7, uploaded : 8},
		repo = {},
		settings = {
			phpPostMinSize : 5.5 * 1024 * 1024, // Bytes
			phpUploadMaxFilesize : 5 * 1024 * 1024, // Bytes 5MB because of Cloud
			phpPostMaxSize : 11 * 1024 * 1024, // Bytes
			estimatedTimeForUploadFile : 10 * 60, // in sec
			maxTimeForUploadFile : 15 * 60, // in sec
			maxSize : null
		};

	BX.UploaderManager = function() {

	};
	BX.UploaderManager.getById = function(id)
	{
		return (
			typeof repo[id] != 'undefined'
				? repo[id]
				: false
		)
	};
	/**
	 * @params array
	 * @params[input] - BX(id).
	 *  DOM-node with id="uploader_somehash" should exist and will be replaced	 *
	 * @params[dropZone] - DOM node to drag&drop
	 * @params[placeHolder] - DOM node to append files
	 *
	 */
	BX.Uploader = function(params)
	{
		if (settings.maxSize === null && BX.message["bxDiskQuota"] && BX.message("bxDiskQuota"))
			settings.maxSize = parseInt(BX.message("bxDiskQuota"));
		var ii;
		if (!(typeof params == "object" && params && (BX(params["input"]) || params["input"] === null)))
		{
			BX.debug(BX.message("UPLOADER_INPUT_IS_NOT_DEFINED"));
		}
		else
		{
			if (parseInt(BX.message("phpMaxFileUploads")) <= 0)
				ii = {phpMaxFileUploads : '20'};
			if (parseInt(BX.message('phpPostMaxSize')) <= 0)
			{
				ii = (ii || {});
				ii["phpPostMaxSize"] = settings.phpPostMaxSize + '';
			}
			if (parseInt(BX.message('phpUploadMaxFilesize')) <= 0)
			{
				ii = (ii || {});
				ii["phpUploadMaxFilesize"] = settings.phpUploadMaxFilesize + '';
			}
			if (ii)
				BX.message(ii);

			this.fileInput = (params["input"] === null ? null : BX(params["input"]));
			this.controlID = this.controlId = (params["controlId"] || "bitrixUploader");

			this.dialogName = "BX.Uploader";
			this.id = (BX.type.isNotEmptyString(params["id"]) ? params["id"] : Math.random());
			this.CID = (params["CID"] && BX.type.isNotEmptyString(params["CID"]) ? params["CID"] : ("CID" + BX.UploaderUtils.getId()));
			this.streams = new BX.UploaderStreams(params['streams'], this);

			// Limits
			this.limits = {
				phpMaxFileUploads : parseInt(BX.message('phpMaxFileUploads')),
				phpPostMaxSize : Math.min(parseInt(BX.message('phpPostMaxSize')), settings.phpPostMaxSize),
				phpUploadMaxFilesize : Math.min(parseInt(BX.message('phpUploadMaxFilesize')), settings.phpUploadMaxFilesize),
				uploadMaxFilesize : (params["uploadMaxFilesize"] && params["uploadMaxFilesize"] > 0 ? params["uploadMaxFilesize"] : 0),
				uploadFileWidth : (params["uploadFileWidth"] && params["uploadFileWidth"] > 0 ? params["uploadFileWidth"] : 0),
				uploadFileHeight : (params["uploadFileHeight"] && params["uploadFileHeight"] > 0 ? params["uploadFileHeight"] : 0),
				allowUpload : ((params["allowUpload"] == "A" || params["allowUpload"] == "I" || params["allowUpload"] == "F") ? params["allowUpload"] : "A"),
				allowUploadExt : (typeof params["allowUploadExt"] === "string" ? params["allowUploadExt"] : "")};
			var keys = ["phpMaxFileUploads", "phpPostMaxSize", "phpUploadMaxFilesize"];
			for (ii = 0; ii < keys.length; ii++)
			{
				this.limits[keys[ii]] = (typeof params[keys[ii]] == "number" && params[keys[ii]] < this.limits[keys[ii]] ? params[keys[ii]] : this.limits[keys[ii]]);
			}
			this.limits["phpPostSize"] = Math.min(this.limits["phpPostMaxSize"], settings.phpPostMinSize);

	// ALLOW_UPLOAD = 'A'll files | 'I'mages | 'F'iles with selected extensions
	// ALLOW_UPLOAD_EXT = comma-separated list of allowed file extensions (ALLOW_UPLOAD='F')
			this.limits["uploadFile"] = (params["allowUpload"] == "I" ? "image/*" : "");
			this.limits["uploadFileExt"] = this.limits["allowUploadExt"];

			if (this.limits["uploadFileExt"].length > 0)
			{
				var ext = this.limits["uploadFileExt"].split(this.limits["uploadFileExt"].indexOf(",") >= 0 ? "," : " ");
				for (ii = 0; ii < ext.length; ii++)
					ext[ii] = (ext[ii].charAt(0) == "." ? ext[ii].substr(1) : ext[ii]);
				this.limits["uploadFileExt"] = ext.join(",");
			}
			this.params = params;

			this.params["filesInputName"] = (this.fileInput && this.fileInput["name"] ? this.fileInput["name"] : "FILES");
			this.params["filesInputMultiple"] = (this.fileInput && this.fileInput["multiple"] || this.params["filesInputMultiple"] ? "multiple" : false);
			this.params["uploadFormData"] = (this.params["uploadFormData"] == "N" ? "N" : "Y");
			this.params["uploadMethod"] = (this.params["uploadMethod"] == "immediate" ? "immediate" : "deferred"); // Should we start upload immediately or by event
			this.params["uploadFilesForPackage"] = parseInt(this.params["uploadFilesForPackage"] > 0 ? this.params["uploadFilesForPackage"] : 0);
			this.params["imageExt"] = "jpg,bmp,jpeg,jpe,gif,png";
			this.params["uploadInputName"] = (!!this.params["uploadInputName"] ? this.params["uploadInputName"] : "bxu_files");
			this.params["uploadInputInfoName"] = (!!this.params["uploadInputInfoName"] ? this.params["uploadInputInfoName"] : "bxu_info");
			this.params["deleteFileOnServer"] = !(this.params["deleteFileOnServer"] === false || this.params["deleteFileOnServer"] === "N");
			this.params["pasteFileHashInForm"] = !(this.params["pasteFileHashInForm"] === false || this.params["pasteFileHashInForm"] === "N");

			repo[this.id] = this;
			if (this.init(this.fileInput)) // init fileInput
			{
				if (!!params["dropZone"])
					this.initDropZone(BX(params["dropZone"]));

				if (!!params["events"])
				{
					for(ii in params["events"])
					{
						if (params["events"].hasOwnProperty(ii))
						{
							BX.UploaderUtils.bindEvents(this, ii, params["events"][ii]);
						}
					}
				}
				this.uploadFileUrl = (!!params["uploadFileUrl"] ? params["uploadFileUrl"] : (this.form ? this.form.getAttribute("action") : ""));
				if (!this.uploadFileUrl || this.uploadFileUrl.length <= 0)
				{
					BX.debug(BX.message("UPLOADER_ACTION_URL_NOT_DEFINED"));
				}
				this.status = statuses.ready;


				/* This params only for files. They are here for easy way to change them */
				this.fileFields = params["fields"];
				this.fileCopies = params["copies"];
				var queueFields = (!!params["queueFields"] ? params["queueFields"] : {});
				queueFields["placeHolder"] = BX(queueFields["placeHolder"] || params["placeHolder"]);
				queueFields["showImage"] = (queueFields["showImage"] || params["showImage"]);
				queueFields["sortItems"] = (queueFields["sortItems"] || params["sortItems"]);
				queueFields["thumb"] = (queueFields["thumb"] || params["thumb"]);
				this.queue = new BX.UploaderQueue(queueFields, this.limits, this);

				this.params["doWeHaveStorage"] = true;
				BX.addCustomEvent(this, 'onDone', BX.delegate(function(){
					this.init(this.fileInput);
				}, this));
				if (!!this.params["filesInputName"] && this.params["pasteFileHashInForm"])
				{
					BX.addCustomEvent(this, 'onFileIsUploaded', BX.delegate(function(id, item){
						var node = BX.create("INPUT", {props : { type : "hidden", name : this.params["filesInputName"] + '[]', value : item.hash }});
						if (BX(params["placeHolder"]) && BX(id + 'Item'))
							BX(id + 'Item').appendChild(node);
						else if (this.fileInput !== null)
							this.fileInput.parentNode.insertBefore(node, this.fileInput);
					}, this));
				}
				if (this.params["deleteFileOnServer"])
				{
					BX.addCustomEvent(this, 'onFileIsDeleted', BX.delegate(function(id, file){
						if (!!file && !!file.hash)
						{
							var data = this.preparePost({mode : "delete", hash : file.hash}, false);
							BX.ajax.get(
								this.uploadFileUrl,
								data.data
							);
						}
					}, this));
				}
				BX.onCustomEvent(window, "onUploaderIsInited", [this.id, this]);
				this.uploads = new BX.UploaderUtils.Hash();
				this.upload = null;
				if (this.params["bindBeforeUnload"] === false)
				{
					this.__beforeunload = BX.delegate(this.terminate, this);
				}
				else
				{
					this.__beforeunload = BX.delegate(function(e) {
						if (this.uploads && this.uploads.length > 0)
						{
							var confirmationMessage = BX.message("UPLOADER_UPLOADING_ONBEFOREUNLOAD");
							(e || window.event).returnValue = confirmationMessage;
							return confirmationMessage;
						}
					}, this);
				}
				BX.bind(window, 'beforeunload', this.__beforeunload);
			}
		}
	};

	BX.Uploader.prototype = {
		init : function(fileInput)
		{
			this.log('input is initialized');
			if (BX(fileInput))
			{

				if (fileInput == this.fileInput && !this.form)
					this.form = this.fileInput.form;

				if (fileInput == this.fileInput)
					fileInput = this.fileInput = this.mkFileInput(fileInput);
				else
					fileInput = this.mkFileInput(fileInput);

				BX.onCustomEvent(this, "onFileinputIsReinited", [fileInput, this]);

				if (fileInput)
				{
					BX.bind(fileInput, "change", BX.delegate(this.onChange, this));
					return true;
				}
			}
			else if (fileInput === null && this.fileInput === null)
			{
				this.log('Initialized && null');
				return true;
			}
			return false;
		},
		destruct : function () {
			this.releaseDropZone();
		},
		log : function(text)
		{
			BX.UploaderUtils.log('uploader', text);
		},
		initDropZone : function(node)
		{
			var dropZone = null;
			if (!!BX.DD && BX.type.isDomNode(node) && node.parentNode)
			{
				dropZone = new BX.DD.dropFiles(node);
				if (dropZone && dropZone.supported() && BX.ajax.FormData.isSupported()) {
					dropZone.f = {
						dropFiles : BX.delegate(function(files, e) {
							if (e && e["dataTransfer"] && e["dataTransfer"]["items"] && e["dataTransfer"]["items"].length > 0)
							{
								var dt = e["dataTransfer"], ii, entry, fileCopy = [], replace = false;
								for (ii = 0; ii < dt["items"].length; ii++)
								{
									if (dt["items"][ii]["webkitGetAsEntry"] && dt["items"][ii]["getAsFile"])
									{
										replace = true;
										entry = dt["items"][ii]["webkitGetAsEntry"]();
										if (entry && entry.isFile)
										{
											fileCopy.push(dt["items"][ii]["getAsFile"]());
										}
									}
								}
								if (replace)
									files = fileCopy;
							}
							this.onChange(files);
						}, this),
						dragEnter : function(e) {
							var isFileTransfer = false;
							if (e && e["dataTransfer"] && e["dataTransfer"]["types"])
							{
								for (var i = 0; i < e["dataTransfer"]["types"].length; i++)
								{
									if (e["dataTransfer"]["types"][i] === "Files")
									{
										isFileTransfer = true;
										break;
									}
								}
							}
							if (isFileTransfer)
								BX.addClass(dropZone.DIV, "bxu-file-input-over");
						},
						dragLeave : function() { BX.removeClass(dropZone.DIV, "bxu-file-input-over"); }
					};
					BX.addCustomEvent(dropZone, 'dropFiles', dropZone.f.dropFiles);
					BX.addCustomEvent(dropZone, 'dragEnter', dropZone.f.dragEnter);
					BX.addCustomEvent(dropZone, 'dragLeave' , dropZone.f.dragLeave);
				}
				if (this.params["dropZone"] == node)
				{
					this.dropZone = dropZone;
				}
			}
			return dropZone;
		},
		releaseDropZone : function() {
			if (this.dropZone)
			{
				BX.unbindAll(this.dropZone.DIV);
				this.dropZone.DIV.removeAttribute('dropzone');

				BX.removeCustomEvent(this.dropZone, 'dropFiles', this.dropZone.f.dropFiles);
				BX.removeCustomEvent(this.dropZone, 'dragEnter', this.dropZone.f.dragEnter);
				BX.removeCustomEvent(this.dropZone, 'dragLeave' , this.dropZone.f.dragLeave);
				delete this.dropZone.f.dropFiles;
				delete this.dropZone.f.dragEnter;
				delete this.dropZone.f.dragLeave;
				delete this.dropZone._cancelLeave;
				delete this.dropZone._prepareLeave;

				delete this.dropZone;
			}
		},
		onAttach : function(files, nodes, check)
		{
			check = (check !== false);
			if (typeof files !== "undefined" && files.length > 0)
			{
				if (!this.params["doWeHaveStorage"])
					this.queue.clear();

				if (!BX.type.isArray(files)) // FileList
				{
					var result = [];
					for (var j=0; j < files.length; j++)
					{
						result.push(files[j]);
					}
					files = result;
				}

				BX.onCustomEvent(this, "onAttachFiles", [files, nodes, this]);

				var added = false, ext, type;

				nodes = (typeof nodes == "object" && !!nodes && nodes.length > 0 ? nodes : []);

				for (var i=0, f; i < files.length; i++)
				{
					f = files[i];
					if (BX(f) && f.value)
					{
						ext = (f.value.name || '').split('.').pop();
					}
					else
					{
						ext = (f['name'] || f['tmp_url'] || '').split('.').pop();
						if (ext.indexOf('?') > 0)
							ext = ext.substr(0, ext.indexOf('?'));
					}

					ext = (BX.type.isNotEmptyString(ext) ? ext : '').toLowerCase();
					type = (BX.type.isNotEmptyString(f['type']) ? f['type'] : '').toLowerCase();

					if (
						check &&
						(
							(
								this.limits["uploadFile"] == "image/*" &&
								(
									(BX.type.isNotEmptyString(type) && type.indexOf("image/") !== 0) ||
									(!BX.type.isNotEmptyString(type) && this.params["imageExt"].indexOf(ext) < 0)
								)
							) ||
							(
								this.limits["uploadFileExt"].length > 0 && this.limits["uploadFileExt"].indexOf(ext) < 0
							)
						)
					)
					{
						continue;
					}
					BX.onCustomEvent(this, "onItemIsAdded", [f, (nodes[i] || null), this]);
					added = true;
				}
				if (added)
				{
					BX.onCustomEvent(this, "onItemsAreAdded", [this]);
					if (this.params["uploadMethod"] == "immediate")
						this.submit();
				}
			}
			return false;
		},
		onChange : function(fileInput)
		{
			BX.onCustomEvent(this, "onFileinputWillBeChanged", [fileInput, this]);
			BX.PreventDefault(fileInput);

			var files = fileInput;
			if (fileInput && fileInput.target)
				files = fileInput.target.files;
			else if (!fileInput && BX(this.fileInput))
				files = this.fileInput.files;

			if (BX(this.fileInput) && this.fileInput.disabled)
			{
				BX.DoNothing();
			}
			else
			{
				BX.onCustomEvent(this, "onFileinputIsChanged", [fileInput, this]);
				this.init((fileInput && fileInput["target"] ? fileInput.target : fileInput));
				this.onAttach(files);
			}

			return false;
		},
		mkFileInput : function(oldNode)
		{
			if (!BX(oldNode))
				return false;
			BX.unbindAll(oldNode);
			var node = oldNode.cloneNode(true);
			BX.adjust(node, {
				props : {
					value : ""
				},
				attrs: {
					name: (this.params["uploadInputName"] + '[]'),
					multiple : this.params["filesInputMultiple"],
					accept : this.limits["uploadFile"],
					value : ""
			}});
			oldNode.parentNode.insertBefore(node, oldNode);
			oldNode.parentNode.removeChild(oldNode);
			return node;
		},
		preparePost : function(data, prepareForm)
		{
			var siteId = (BX.message.SITE_ID ? BX.message("SITE_ID") : "");
			if (prepareForm === true && this.params["uploadFormData"] == "Y" && !this.post)
			{
				var post2 = {data : {"AJAX_POST" : "Y", SITE_ID : siteId, USER_ID : BX.message("USER_ID")}, filesCount : 0, size : 10};
				post2 = (this.form ? BX.UploaderUtils.FormToArray(this.form, post2) : post2);
				if (!!post2.data[this.params["filesInputName"]])
				{
					post2.data[this.params["filesInputName"]] = null;
					delete post2.data[this.params["filesInputName"]];
				}
				if (!!post2.data[this.params["uploadInputInfoName"]])
				{
					post2.data[this.params["uploadInputInfoName"]] = null;
					delete post2.data[this.params["uploadInputInfoName"]];
				}
				if (!!post2.data[this.params["uploadInputName"]])
				{
					post2.filesCount -= post2.data[this.params["uploadInputName"]].length;
					post2.data[this.params["uploadInputName"]] = null;
					delete post2.data[this.params["uploadInputName"]];
				}
				if (this.limits["phpMaxFileUploads"] <= post2.filesCount)
				{
					BX.debug('You can not upload any file from your list.');
					return false;
				}
				post2.size = BX.UploaderUtils.sizeof(post2.data);
				this.post = post2;
			}
			var post = (prepareForm === true && this.params["uploadFormData"] == "Y" ? this.post : {data : {"AJAX_POST" : "Y", SITE_ID : siteId, USER_ID : BX.message("USER_ID")}, filesCount : 0, size : 10}), size = 0;
			post.data["sessid"] = BX.bitrix_sessid();
			post.size += (6 + BX.bitrix_sessid().length);
			if (data)
			{
				post.data[this.params["uploadInputInfoName"]] = {
					controlId : this.controlId,
					CID : this.CID,
					inputName : this.params["uploadInputName"],
					version : BX.Uploader.getVersion()
				};
				for (var ii in data)
				{
					if (data.hasOwnProperty(ii))
					{
						post.data[this.params["uploadInputInfoName"]][ii] = data[ii];
					}
				}
				size = BX.UploaderUtils.sizeof(this.params["uploadInputInfoName"]) + BX.UploaderUtils.sizeof(post.data[this.params["uploadInputInfoName"]]);
			}
			post.length = post.size + size;
			return post;
		},
		submit : function()
		{
			this.start();
		},
		stop : function()
		{
			this.terminate();
		},
		adjustProcess : function(streamId, item, status, params, pIndex)
		{
			var text = '', percent = 0;
			if (this.queue.itFailed.hasItem(item.id))
			{
				text = 'response [we do not work with errors]';
			}
			else if (status == statuses.error)
			{
				delete item.progress;
				this.queue.itFailed.setItem(item.id, item);
				this.queue.itForUpload.removeItem(item.id);

				BX.onCustomEvent(this, "onFileIsUploadedWithError", [item.id, item, params, this, pIndex]);
				BX.onCustomEvent(item, "onUploadError", [item, params, this, pIndex]);
				text = 'response [error]';
			}
			else if (status == statuses.uploaded)
			{
				delete item.progress;
				this.queue.itUploaded.setItem(item.id, item);
				this.queue.itForUpload.removeItem(item.id);

				BX.onCustomEvent(this, "onFileIsUploaded", [item.id, item, params, this, pIndex]);
				BX.onCustomEvent(item, "onUploadDone", [item, params, this, pIndex]);
				text = 'response [uploaded]';
			}
			else if (status == statuses.inprogress)
			{
				if (typeof params == "number")
				{
					if (params == 0 && item.progress.status == statuses["new"])
					{
						BX.onCustomEvent(item, "onUploadStart", [item, 0, this, pIndex]);
						item.progress.status = statuses.inprogress;
					}

					percent = item.progress.uploaded + (item.progress.streams[streamId] * params) / 100;
				}
				else
				{
					item.progress.uploaded += item.progress.streams[streamId];
					item.progress.streams[streamId] = 0;
					percent = item.progress.uploaded;
				}
				text = 'response [uploading]. Uploaded: ' + percent;
				BX.onCustomEvent(item, "onUploadProgress", [item, percent, this, pIndex]);
			}
			else if (status == statuses.failed)
			{
				if (item.progress.streams[streamId] == item.progress.percentPerChunk)
				{
					item.progress = null;
					delete item.progress;
				}
				else
				{
					item.progress.streams[streamId] -= item.progress.percentPerChunk / params.packages;
					item.progress.streams[streamId] = (item.progress.streams[streamId] > 0 ? item.progress.streams[streamId] : 0);
				}
			}
			else
			{
				if (status == statuses["new"])
				{
					var chunks = (item.getThumbs("getCount") > 0 ? item.getThumbs("getCount") : 0)
						+ 2;// props + (default canvas || file)

					item.progress = {
						percentPerChunk : (100 / chunks),
						streams : {},
						uploaded : 0,
						status : statuses["new"]
					};
					item.progress.streams[streamId] = item.progress.percentPerChunk;
					text = 'request preparing [start]. Prepared: ' + item.progress.streams[streamId];
				}
				else if (status == statuses.preparing)
				{
					item.progress.streams[streamId] = (item.progress.streams[streamId] > 0 ? item.progress.streams[streamId] : 0);
					item.progress.streams[streamId] += item.progress.percentPerChunk / params.packages;
					text += 'request preparing [cont]. Prepared: ' + item.progress.streams[streamId];
				}
				else
				{
					text = 'request preparing [finish]. ';
				}
				BX.onCustomEvent(item, "onUploadPrepared", [item, params, this, pIndex]);
			}
			this.log(item.name + ': ' + text);
		},
		terminate : function(pIndex)
		{
			var packageFormer, packagesFormer;
			if (!pIndex || pIndex == 'beforeunload')
			{
				packagesFormer = this.uploads;

				this.uploads = new BX.UploaderUtils.Hash();
				this.upload = null;

				while ((packageFormer = packagesFormer.getFirst()) && packageFormer)
				{
					packagesFormer.removeItem(packageFormer.id);
					this.terminate(packageFormer);
				}
				return;
			}
			else if (BX.type.isNotEmptyString(pIndex))
			{
				packageFormer = this.uploads.removeItem(pIndex);
			}
			else if (typeof pIndex == "object")
			{
				packageFormer = pIndex;
			}
			if (packageFormer && packageFormer["stop"])
			{
				packageFormer.stop();
				this.log(packageFormer.id + ' Uploading is canceled');
				BX.onCustomEvent(this, 'onTerminated', [packageFormer.id, packageFormer]);
			}
		},
		start : function()
		{
			if (this.queue.itForUpload.length <= 0)
			{
				BX.onCustomEvent(this, 'onStart', [null, {filesCount : 0}, this]);
				BX.onCustomEvent(this, 'onDone', [null, null, {filesCount : 0}]);
				BX.onCustomEvent(this, 'onFinish', [null, null, {filesCount : 0}]);
				return;
			}

			var pIndex = 'pIndex' + BX.UploaderUtils.getId(), queue = this.queue.itForUpload;
			this.queue.itForUpload = new BX.UploaderUtils.Hash();
			this.post = false;
			this.log('create new package ' + pIndex);
			var packageFormer = new BX.UploaderPackage({
				id : pIndex,
				data : queue,
				post : this.preparePost({}, true),
				uploadFileUrl : this.uploadFileUrl,
				limits : this.limits,
				params : this.params
			}, this);
			BX.addCustomEvent(packageFormer, 'adjustProcess', BX.proxy(this.adjustProcess, this));
			BX.addCustomEvent(packageFormer, 'startStream', BX.proxy(function(stream, pack, files){ BX.onCustomEvent(this, 'startPackage', [stream, pack.id, files]); }, this));
			BX.addCustomEvent(packageFormer, 'progressStream', BX.proxy(function(stream, pack, proc){ BX.onCustomEvent(this, 'processPackage', [stream, pack.id, proc]); }, this));
			BX.addCustomEvent(packageFormer, 'doneStream', BX.proxy(function(stream, pack, data){ BX.onCustomEvent(this, 'donePackage', [stream, pack.id, data]); }, this));
			BX.addCustomEvent(packageFormer, 'stopPackage', BX.proxy(function(pack){
				this.log('restore files: '+ pack.data.length);
				this.queue.restoreFiles(pack.data);
			}, this));
			BX.addCustomEvent(packageFormer, 'donePackage', BX.proxy(function(stream, pack, data){
				BX.onCustomEvent(this, 'onDone', [stream, pack.id, pack, data]);
				var res = this.checkUploads(pack.id);
				if (!res)
					BX.onCustomEvent(this, 'onFinish', [stream, pack.id, pack, data]);
			}, this));
			BX.addCustomEvent(packageFormer, 'errorPackage', BX.proxy(function(stream, pack, data){
				BX.onCustomEvent(this, 'error', [stream, pIndex, data]);
				BX.onCustomEvent(this, 'onError', [stream, pIndex, data]);
				this.checkUploads(pack.id);
			}, this));
			BX.addCustomEvent(packageFormer, 'processPackage', BX.proxy(function(stream, pack, procent){
				BX.onCustomEvent(this, 'processPackage', [stream, pack, procent]);
			}, this));

			BX.onCustomEvent(this, 'onStart', [pIndex, packageFormer, this]);
			this.uploads.setItem(pIndex, packageFormer);
			this.checkUploads();
		},
		checkUploads : function(pIndex)
		{
			if (pIndex)
				this.uploads.removeItem(pIndex);
			this.upload = this.uploads.getFirst();
			if (this.upload)
				this.upload.start(this.streams);
			return this.upload;
		},
		// public functions
		getItem : function(id)
		{
			return this.queue.getItem(id);
		},
		getItems : function()
		{
			return this.queue.items;
		},
		restoreItems : function()
		{
			this.queue.restoreFiles.apply(this.queue, arguments);
		},
		clear : function()
		{
			var item;
			while((item = this.queue.items.getFirst()) && item)
			{
				item.deleteFile();
			}
		}
	};

	BX.UploaderSimple = function(params)
	{
		BX.UploaderSimple.superclass.constructor.apply(this, arguments);
		this.dialogName = "BX.UploaderSimple";
		this.previews = new BX.UploaderUtils.Hash();
		if (this.params["uploadMethod"] != "immediate")
		{
			BX.addCustomEvent(this, "onFileNeedsPreview", BX.delegate(function(id, item) {
				this.previews.setItem(item.id, item);
				this.log('onFileNeedsPreview: ' + item.id);
				setTimeout(BX.delegate(this.onFileNeedsPreview, this), 500);
			}, this));
			BX.addCustomEvent(this, "onStart", BX.delegate(function(pIndex, packageFormer) {
				if (packageFormer && packageFormer.filesCount > 0)
				{
					var queue = packageFormer.raw.getIds(), ii;
					for (ii = 0; ii < queue.length; ii++)
					{
						this.previews.removeItem(queue[ii]);
					}
				}
			}, this));
		}
		else
		{
			BX.addCustomEvent(this, "onFileIsUploaded", BX.delegate(function(id, item, data) {
				this.dealWithFile(item, data);
			}, this));
		}
		this.streams = new BX.UploaderStreams(1, this);
		return this;
	};
	BX.extend(BX.UploaderSimple, BX.Uploader);

	BX.UploaderSimple.prototype.preparePost = function()
	{
		var post = BX.UploaderSimple.superclass.preparePost.apply(this, arguments);
		if (post && post.data && post.data[this.params["uploadInputInfoName"]] && !post.data[this.params["uploadInputInfoName"]]["simpleUploader"])
		{
			post.data[this.params["uploadInputInfoName"]]["simpleUploader"] = "Y";
			post.size += 15;
		}
		return post;
	};
	BX.UploaderSimple.prototype.init = function(fileInput, del)
	{
		this.log('input is initialized: ' + (del !== false ? 'drop' : ' does not drop'));
		if (BX(fileInput))
		{
			if (fileInput == this.fileInput && !this.form)
				this.form = this.fileInput.form;

			if (fileInput == this.fileInput)
				fileInput = this.fileInput = this.mkFileInput(fileInput, del);
			else
				fileInput = this.mkFileInput(fileInput, del);

			BX.onCustomEvent(this, "onFileinputIsReinited", [fileInput, this]);

			if (fileInput)
			{
				BX.bind(fileInput, "change", BX.delegate(this.onChange, this));
				return true;
			}
		}
		else if (fileInput === null && this.fileInput === null)
		{
			this.log('Initialized && null');
			return true;
		}
		return false;
	};
	BX.UploaderSimple.prototype.log = function(text)
	{
		BX.UploaderUtils.log('simpleup', text);
	};
	BX.UploaderSimple.prototype.mkFileInput = function(oldNode, del)
	{
		if (!BX(oldNode))
			return false;
		BX.unbindAll(oldNode);
		var node = oldNode.cloneNode(true);
		BX.adjust(node, {
			attrs: {
				id : "",
				name: (this.params["uploadInputName"] + '[file' + BX.UploaderUtils.getId() + '][default]'),
				multiple : false,
				accept : this.limits["uploadFile"]
		}});
		oldNode.parentNode.insertBefore(node, oldNode);
		if (del !== false)
			oldNode.parentNode.removeChild(oldNode);

		return node;
	};
	BX.UploaderSimple.prototype.onChange = function(fileInput)
	{
		BX.PreventDefault(fileInput);

		fileInput = (fileInput.target || fileInput.srcElement || this.fileInput);

		if (BX(this.fileInput) && this.fileInput.disabled)
		{
			BX.DoNothing();
		}
		else
		{
			this.init(fileInput, false);
			this.onAttach([fileInput]);
		}
		return false;
	};
	BX.UploaderSimple.prototype.dealWithFile = function(item, data)
	{
		var file;
		if (data &&
			data["status"] == "uploaded" &&
			data["hash"] &&
			data["file"] &&
			data["file"]["files"] &&
			data["file"]["files"]["default"])
		{
			file = data["file"]["files"]["default"];
		}
		if (file)
		{
			item.file = {
				"name" : file["name"],
				"~name" : file["~name"],
				size : parseInt(file["size"]),
				type : file["type"],
				id : item.id,
				hash : data["hash"],
				copy : "default",
				url : file["url"],
				uploadStatus : statuses.done
			};
			item.nonProcessRun = true;
			BX.onCustomEvent(item, "onFileHasGotPreview", [item.id, item]);
		}
		else
		{
			BX.onCustomEvent(item, "onFileHasNotGotPreview", [item.id, item]);
		}
	};
	BX.UploaderSimple.prototype.onFileNeedsPreviewCallback = function(pack, data)
	{
		if (!(data && data["files"]))
		{
			this.log('onFileNeedsPreviewCallback is failed.');
			return;
		}
		this.log('onFileNeedsPreviewCallback');
		this.onFileNeedsPreview();

		var item;
		while((item = pack.result.getFirst()) && !!item)
		{
			pack.result.removeItem(item.id);
			this.dealWithFile(item, data["files"][item.id]);
		}
	};
	BX.UploaderSimple.prototype.onFileNeedsPreview = function()
	{
		this.log('onFileNeedsPreview');
		var queue = new BX.UploaderUtils.Hash(), item;
		while (queue.length < this.limits["phpMaxFileUploads"] &&
			(item = this.previews.getFirst()) && item && item !== null)
		{
			this.previews.removeItem(item.id);
			queue.setItem(item.id, item);
		}
		if (queue.length > 0)
		{
			this.post = false;
			var pIndex = 'pIndex' + BX.UploaderUtils.getId();
			this.log('create new package for preview ' + pIndex);
			var packageFormer = new BX.UploaderPackage({
				id : pIndex,
				data : queue,
				post : this.preparePost({type : "brief"}, true),
				uploadFileUrl : this.uploadFileUrl,
				limits : this.limits,
				params : this.params
			});
			packageFormer["SimpleUploaderUploadsPreview"] = "Y";
			BX.addCustomEvent(packageFormer, 'adjustProcess', BX.proxy(function(streamId, item, status, params, pIndex) {
				if (status == statuses.error)
				{
					this.adjustProcess(streamId, item, status, params, pIndex);
				}
			}, this));
			BX.addCustomEvent(packageFormer, 'startStream', BX.proxy(function(stream, pack, files){ BX.onCustomEvent(this, 'startPackagePreview', [stream, pack.id, files]); }, this));
			BX.addCustomEvent(packageFormer, 'progressStream', BX.proxy(function(stream, pack, proc){ BX.onCustomEvent(this, 'processPackagePreview', [stream, pack.id, proc]); }, this));
			BX.addCustomEvent(packageFormer, 'doneStream', BX.proxy(function(stream, pack, data){ BX.onCustomEvent(this, 'donePackagePreview', [stream, pack.id, data]); }, this));
			BX.addCustomEvent(packageFormer, 'stopPackage', BX.proxy(function(pack){
//				this.log('restore preview files: ', pack.repo.length);
//				this.queue.restoreFiles(pack.repo);
			}, this));
			BX.addCustomEvent(packageFormer, 'donePackage', BX.proxy(function(stream, pack, data){
				this.checkUploads(pack.id);
				this.onFileNeedsPreviewCallback(pack, data);
			}, this));
			BX.addCustomEvent(packageFormer, 'errorPackage', BX.proxy(function(stream, pack, data){
				BX.onCustomEvent(this, 'error', [stream, pIndex, data]);
				BX.onCustomEvent(this, 'onError', [stream, pIndex, data]);
				this.checkUploads(pack.id);
			}, this));
			BX.addCustomEvent(packageFormer, 'processPackage', BX.proxy(function(stream, pack, procent){
				BX.onCustomEvent(this, 'processPackagePreview', [stream, pack, procent]);
			}, this));

			BX.onCustomEvent(this, 'onStartPreview', [pIndex, packageFormer, this]);
			this.uploads.setItem(pIndex, packageFormer);
			this.checkUploads();
		}
	};
	BX.Uploader.isSupported = function()
	{
		return (window.Blob || window["MozBlobBuilder"] || window["WebKitBlobBuilder"] || window["BlobBuilder"]);
	};
	var objName = "BX.UploaderSimple";
	if (BX.Uploader.isSupported())
		objName = "BX.Uploader";
	BX.Uploader.getInstanceName = function()
	{
		return objName;
	};
	BX.Uploader.getInstance = function(params)
	{
		BX.onCustomEvent(window, "onUploaderIsAlmostInited", [objName, params]);
		return eval("new " + objName + "(params);");
	};
	BX.UploaderPackage = function(params, manager)
	{
		this.filesCount = 0;
		this.length = 0;
		params = (params || {});
		this["pIndex"] = this.id = params["id"];
		this.limits = params["limits"];
		this.params = params["params"];
		this.status = statuses.ready;

		if (params["data"] && params.data.length > 0)
		{
			/**
			 * this.length integer
			 * this.repo BX.UploaderUtils.Hash()
			 * this.raw BX.UploaderUtils.Hash()
			 * this.data BX.UploaderUtils.Hash()
			 */
			this.length = params.data.length;
			this.filesCount = params.data.length;
			this.uploadFileUrl = params["uploadFileUrl"];
			this.raw = params.data;

			this.repo = new BX.UploaderUtils.Hash();
			this.data = new BX.UploaderUtils.Hash();
			this.result = new BX.UploaderUtils.Hash();
			this.init();
			this.post = params["post"];
			if (!this.post)
			{
				var item;
				while ((item = this.raw.getFirst()) && item)
				{
					this.adjustProcess(null, item, statuses.error, {error : BX.message("UPLOADER_UPLOADING_ERROR2")});
					this.raw.removeItem(item.id);
				}
				BX.onCustomEvent(this, 'errorPackage', [null, this, null]);
			}
			else
			{
				var ii, data = { packageIndex : this.id, filesCount : this.filesCount, mode : "upload" };
				for (ii in data)
				{
					if (data.hasOwnProperty(ii))
					{
						this.post.data[this.params["uploadInputInfoName"]][ii] = data[ii];
						this.post.size += BX.UploaderUtils.sizeof(ii) + BX.UploaderUtils.sizeof(data[ii]);
					}
				}
				this.post.startSize = this.post.size;
				BX.onCustomEvent(this, "initializePackage", [this, this.data]);
				if (manager)
					BX.onCustomEvent(manager, "onPackageIsInitialized", [this, this.data]);
				this.log('initialize');
			}
		}
		this._exec = BX.delegate(this.exec, this);
	};

	BX.UploaderPackage.prototype = {
		checkFile : function(item)
		{
			var error = "";
			if (item.file)
			{
				if (this.limits["uploadMaxFilesize"] > 0 && item.file.size > this.limits["uploadMaxFilesize"])
				{
					error = BX.message('FILE_BAD_SIZE') + ' (' + BX.UploaderUtils.getFormattedSize(this.limits["uploadMaxFilesize"], 2) + ')';
				}
				else if (settings.maxSize !== null && item.file.size > settings.maxSize)
				{
					error = BX.message('UPLOADER_UPLOADING_ERROR6');
				}
			}
			return error;
		},
		packStream : function(stream)
		{
			if (stream.filesSize <= 0)
				return null;

			var fd = new BX.UploaderUtils.FormData(), item,
				data = this.post.data,
				files = stream.files,
				res;
			for (item in data)
			{
				if (data.hasOwnProperty(item))
				{
					BX.UploaderUtils.appendToForm(fd, item, data[item]);
				}
			}
			for (var id in files)
			{
				if (files.hasOwnProperty(id))
				{
					data = files[id];

					if (!!data.props)
					{
						res = BX.UploaderUtils.prepareData(data.props);
						for (item in res)
						{
							if (res.hasOwnProperty(item))
							{
								BX.UploaderUtils.appendToForm(fd,  this.params["uploadInputName"] + '[' + id + '][' + item + ']', res[item]);
							}
						}
					}
					if (!!data.files)
					{
						for (var ii = 0; ii < data.files.length; ii++)
						{
							item = data.files[ii];
							item.copy = item.postName = (item.thumb ? item.thumb : 'default');
							if (item.packages > 0)
							{
								item.postName += ('.ch' + item.package + '.' + (item.start > 0 ? item.start : "0") + '.chs' + item.packages);
							}
							fd.append((this.params["uploadInputName"] + '[' + id + '][' + BX.UploaderUtils.prepareData(item.postName) + ']'), item, BX.UploaderUtils.prepareData(item.postName));
						}
					}
				}
			}
			fd.action = this.uploadFileUrl;
			return fd;
		},
		packFiles : function(item, stream)
		{
			if (!item)
				return statuses.error;
			else if (item["uploadStatus"] == statuses.done || item["uploadStatus"] == statuses.error)
				return item["uploadStatus"];
			var count = (this.limits["phpMaxFileUploads"] - this.post.filesCount - (stream.filesCount || 0)),
				size = (this.limits["phpPostMaxSize"] - stream.filesSize - stream.postSize),
				filesSize = (this.limits["phpPostSize"] - stream.filesSize),
				blob, file, data = {files : []}, tmp, error, callback, cf;
			while (size > 0 && count > 0 && filesSize > 0)
			{
				file = null; blob = null; error = ''; callback = [];
				if (item.uploadStatus != statuses.preparing)
				{
					error = this.checkFile(item);
					if (error === '')
					{
						data.props = item.getProps();
						if (item["restored"])
						{
							data.props["restored"] = item["restored"];
							delete item["restored"];
						}
						callback.push(BX.proxy(function() {
							item.uploadStatus = statuses.preparing;
							this.adjustProcess(stream.id, item, statuses["new"], {});
						}, this));
					}
					else
					{
						data.props = {name : item.name, error : true};
						this.adjustProcess(stream.id, item, statuses.error, {error : error});
						item.uploadStatus = statuses.error;
					}
				}
				if (item.uploadStatus == statuses.error)
				{

				}
				else if (item.nonProcessRun === true)
				{
					item.uploadStatus = statuses.done;
				}
				else
				{
					if (!item["file"])
					{
						file = null;
					}
					else if (item.file.uploadStatus != statuses.done)
					{
						file = item.file;
					}
					else if (item["thumb"] && item.thumb !== null)
					{
						file = item.thumb;
					}
					else
					{
						item.thumb = file = item.getThumbs(null);
					}
					var fileConstructor = Object.prototype.toString.call(file);
					if (file === null)
					{
						item.uploadStatus = statuses.done;
						this.adjustProcess(stream.id, item, statuses.done, {});
						item.file.uploadStatus = statuses.done;
						item.thumb = null;
					}
					else if (BX.type.isDomNode(file))
					{
						data.props = (data.props || {name : item.name });
						data.files.push(file);
						callback.push(BX.proxy(function(file) {
							file.uploadStatus = statuses.done;
							if (item.file == file)
							{
								this.adjustProcess(stream.id, item, statuses.preparing, {canvas : "default", package : 1, packages : 1});
							}
							else
							{
								this.adjustProcess(stream.id, item, statuses.preparing, {canvas : item.thumb.thumb, package : 1, packages : 1});
								item.thumb = null;
							}
						}, this))
					}
					else if (!(fileConstructor == '[object File]' || fileConstructor == '[object Blob]'))
					{
						data.props = (data.props || {name : item.name });
						data.props["files"] = (data.props["files"] || {});
						data.props["files"][(file["thumb"] || "default")] = file;
						callback.push(BX.proxy(function(file) {
							file.uploadStatus = statuses.done;
							if (item.file == file)
							{
								this.adjustProcess(stream.id, item, statuses.preparing, {canvas : "default", package : 1, packages : 1});
							}
							else
							{
								this.adjustProcess(stream.id, item, statuses.preparing, {canvas : item.thumb.thumb, package : 1, packages : 1});
								item.thumb = null;
							}
						}, this))
					}
					else
					{
						blob = BX.UploaderUtils.getFilePart(file, (size - BX.UploaderUtils.sizeof({name : item.name})), this.limits["phpUploadMaxFilesize"]);
						if (!blob)
						{
							data.props = "error";
							this.adjustProcess(stream.id, item, statuses.error, {error : BX.message('FILE_BAD_SIZE')});
							item.uploadStatus = statuses.error;
						}
						else
						{
							data.files.push(blob);
							data.props = (data.props || {name : item.name});
							callback.push(BX.proxy(function(file, blob) {
								BX.UploaderUtils.applyFilePart(file, blob);
								if (item.file == file && blob == file)
								{
									this.adjustProcess(stream.id, item, statuses.preparing, {canvas : "default", package : 1, packages : 1});
								}
								else if (item.file == file)
								{
									this.adjustProcess(stream.id, item, statuses.preparing, {canvas : "default", package : (blob.package + 1), packages : blob.packages, blob : blob});
								}
								else if (blob == file)
								{
									this.adjustProcess(stream.id, item, statuses.preparing, {canvas : item.thumb.thumb, package : 1, packages : 1, blob : blob});
									item.thumb = null;
								}
								else
								{
									this.adjustProcess(stream.id, item, statuses.preparing,
										{canvas : item.thumb.thumb, package : (blob.package + 1), packages : blob.packages, blob : blob});
									if (item.thumb.uploadStatus == statuses.done)
										item.thumb = null;
								}
							}, this));
						}
					}
				}
				if (data.files.length > 0 || data["props"])
				{
					tmp = BX.UploaderUtils.sizeof(data.files) + (data["props"] ? BX.UploaderUtils.sizeof(data.props) : 0);
					size -= tmp;
					filesSize -= tmp;
					if (size >= 0 && filesSize > 0)
					{
						while ((cf=callback.shift()) && cf)
							cf(file, blob, error);

						stream.filesSize += tmp;
						stream.files[item.id] = BX.UploaderUtils.makeAnArray(stream.files[item.id], data);

						if (data.files.length) { count--; stream.filesCount++; }
					}
					else if (stream.filesCount <= 0)
					{
						this.adjustProcess(stream.id, item, statuses.error, {error : BX.message('UPLOADER_UPLOADING_ERROR4')});
						item.uploadStatus = statuses.error;
					}
					data = {files : []};
				}
				if (item.uploadStatus !== statuses.preparing)
				{
					break;
				}
			}
			return item.uploadStatus;
		},
		start : function(streams)
		{
			this.streams = streams;
			if (this.status != statuses.ready)
				return;
			this.status = statuses.inprogress;
			this.__onAllStreamsAreKilled = BX.delegate(function(streams, stream){
				this.stop();
				BX.onCustomEvent(this, 'donePackage', [stream, this, this['lastResponse']]);
			}, this);
			BX.addCustomEvent(this.streams, 'onrelease', this.__onAllStreamsAreKilled);
			BX.onCustomEvent(this, 'startPackage', [this, streams]);
			this.log('start');
			streams.init(this, this._exec);
		},
		stop : function()
		{
			this.status = statuses.stopped;
			this.streams.stop();
			BX.onCustomEvent(this, 'stopPackage', [this, this.repo]);
			BX.removeCustomEvent(this.streams, 'onrelease', this.__onAllStreamsAreKilled);
			this.log('stop');
		},
		log : function()
		{
			BX.UploaderUtils.log('package', this.id, arguments);
		},
		init : function()
		{
			var item, callback = BX.proxy(function(id, item) {
				if (this.raw.removeItem(id))
				{
					this.data.setItem(id, item);
					this.repo.setItem(id, item);
					BX.onCustomEvent(item, "onFileHasToBePrepared", [item.id, item]);

					this.init();
				}
			} , this);

			while ((item = this.raw.getFirst()) && item)
			{
				BX.addCustomEvent(item, "onFileIsDeleted", BX.delegate(function(item){
					this.length--;
					this.filesCount--;
					if (this.data.removeItem(item.id))
						this.post.data[this.params["uploadInputInfoName"]]['filesCount'] = this.filesCount;
					this.result.removeItem(item.id);
					this.repo.removeItem(item.id);
				}, this));
				if (item.status === statuses["new"])
				{
					BX.addCustomEvent(item, "onFileIsInited", callback);
					break;
				}
				else
				{
					callback(item.id, item);
				}
			}
		},
		exec : function(stream, reinit)
		{
			if (this.status !== statuses.inprogress)
				return;
			this.log('exec');
			var item, exec = false;
			if (stream.pack != this)
			{
				this.log('stream is bound: ' + stream.id);
				BX.addCustomEvent(stream, 'onsuccess', BX.delegate(this.doneStream, this));
				BX.addCustomEvent(stream, 'onfailure', BX.delegate(this.errorStream, this));
				BX.addCustomEvent(stream, 'onprogress', BX.delegate(this.progressStream, this));
			}
			if (reinit !== false)
			{
				this.log('stream is reinited: ' + stream.id);
				stream.init(this);
			}

			var status, files = stream.filesCount;
			if (this.filesCount > 0)
			{
				while ((item = this.data.getFirst()) && item)
				{
					if (item.uploadStatus == statuses.done)
					{
						// everything is good so we go to another file
					}
					else if (item.preparationStatus != statuses.done) // if file is not initialized
					{
						exec = true;
						break;
					}
					status = this.packFiles(item, stream);
					if (typeof status == "undefined")
					{
						break;
					}
					else if (status != statuses.error)
					{
						files++;
						if (status == statuses.preparing) // if file is not fitted into package
						{
							break;
						}
					}
					this.data.removeItem(item.id);
					if (this["SimpleUploaderUploadsPreview"] == "Y") // in case if it is a simple Uploader uploads preview
					{
						delete item.uploadStatus;
					}
				}
				if (exec === true || (!item && this.raw.length > 0)) // if image is not loaded
				{
					setTimeout(BX.proxy(function(){this.exec(stream, false)}, this), 100);
					return;
				}
			}
			var fd = (files > 0 ? this.packStream(stream) : null);
			if (fd !== null)
			{
				this.log('stream is packed: ' + stream.id);
				this.startStreaming(stream);
				stream.send(fd);
				this.sended = true;
			}
			else
			{
				this.log('stream is killed: ' + stream.id);
				stream.kill();
			}
		},
		adjustProcess : function(streamId, item, status, params)
		{
			if (item && this.repo.hasItem(item.id))
			{
				if (status == statuses.error || status == statuses.uploaded)
				{
					this.data.removeItem(item.id);
					this.result.setItem(item.id, item);
				}
				BX.onCustomEvent(this, 'adjustProcess', [streamId, item, status, params, this.id, this]);
			}
		},
		adjustPostSize : function(stream, increase)
		{
			var result = false, sugestedSize = null;

			var deltaTime = (stream.xhr.finishTime - stream.xhr.startTime);
			if (increase !== false)
			{
				sugestedSize = Math.ceil(deltaTime > 0 ? ((stream.postSize + stream.filesSize) * 1000/ deltaTime ) * settings.estimatedTimeForUploadFile : 0);

				if (sugestedSize > this.limits["phpPostSize"])
				{
					sugestedSize = Math.min(
						this.limits["phpPostSize"] * 2,
						sugestedSize,
						this.limits["phpPostMaxSize"]
					);
				}
			}
			else if (this.limits["phpPostSize"] > settings.phpPostMinSize)
			{
				sugestedSize = Math.ceil(this.limits["phpPostSize"] / 2);
			}
			if (sugestedSize > 0 && sugestedSize !== this.limits["phpPostSize"])
			{
				this.limits["phpPostSize"] = Math.max(sugestedSize, settings.phpPostMinSize);
				result = true;
			}
			return result;
		},
		startStreaming : function(stream)
		{
			this.log('start streaming');
			for (var id in stream.files)
			{
				if (stream.files.hasOwnProperty(id))
				{
					this.adjustProcess(stream.id, this.repo.getItem(id), statuses.inprogress, 0);
				}
			}
			BX.onCustomEvent(this, 'startStream', [stream, this.id, stream.files]);
		},
		doneStream : function(stream, data)
		{
			this.adjustPostSize(stream, true);
			var merge = function(ar1, ar2)
				{
					for (var jj in ar2)
					{
						if (ar2.hasOwnProperty(jj) && !ar1[jj])
						{
							ar1[jj] = ar2[jj]
						}
						else if ((typeof ar2[jj] == typeof ar1[jj] == "object") && ar2[jj] !== null && ar1[jj] !== null)
						{
							ar1[jj] = merge(ar1[jj], ar2[jj]);
						}
					}
					return ar1;
				};
			this.response = merge((this.response || {}), (data || {}));
			var item, id, file, nonProcessRun, files, ij, copies;
			for (id in stream.files)
			{
				if (stream.files.hasOwnProperty(id))
				{
					item = this.repo.getItem(id);
					if (item && (file = data.files[id]))
					{
						if (!file) // has never been loaded
						{
							this.queue.restoreFiles(new BX.UploaderUtils.Hash([item]));
						}
						else if (!file["status"]) // was downloaded partly before but not this time
						{
							if (BX.type.isArray(stream.files[id]["files"]))
							{
								copies = {};
								for (ij = 0; ij < stream.files[id]["files"].length; ij++)
								{
									file = stream.files[id]["files"][ij];
									if (copies[file["copy"]])
										continue;
									copies[file["copy"]] = "Y";
									if (file["copy"] == "default" && file["package"] <= 0)
									{
										this.queue.restoreFiles(new BX.UploaderUtils.Hash([item]));
										break;
									}

									if (file["copy"] == "default")
									{
										item.uploadStatus = statuses.preparing;
										item.file["uploadStatus"] = statuses.preparing;
										item.file["package"] = file["package"];
									}

									if (item.file["copies"])
									{
										item.file["copies"].reset();
										var copy;
										while((copy = item.file["copies"].getNext()) && copy)
										{
											delete copy["uploadStatus"];
											delete copy["firstChunk"];
											delete copy["package"];
											delete copy["packages"];
										}
										item.file["copies"].reset();
									}
								}
							}
						}
						else if (file.status == "error")
						{
							this.adjustProcess(stream.id, item, statuses.error, file);
						}
						else if ((item.hash = file.hash) && file.status == "uploaded")
						{
							if (settings.maxSize !== null)
								settings.maxSize -= item.file.size;
							this.adjustProcess(stream.id, item, statuses.uploaded, file);
						}
						else // chunks
						{
							this.adjustProcess(stream.id, item, statuses.inprogress, file);
							// in case we need to glue chunks only(!)

							nonProcessRun = false;
							files = (file["file"] && file["file"]["files"] ? file["file"]["files"] : false);
							if (typeof files == "object")
							{
								for (ij in files)
								{
									if (files.hasOwnProperty(ij))
									{
										if (files[ij]["chunksInfo"] &&
											files[ij]["chunksInfo"]["count"] == files[ij]["chunksInfo"]["uploaded"] &&
											files[ij]["chunksInfo"]["count"] > files[ij]["chunksInfo"]["written"])
										{
											nonProcessRun = true;
											break;
										}
									}
								}
								item.nonProcessRun = nonProcessRun;
								if (nonProcessRun == true)
								{
									if (!item["nonProcessRunLastTimeWritten"] ||
										item["nonProcessRunLastTimeWritten"] != files[ij]["chunksInfo"]["written"])
									{
										item["nonProcessRunLastTimeWritten"] = files[ij]["chunksInfo"]["written"];
										item["nonProcessRunLastTimeWrittenCount"] = 0;
									}
									else
									{
										item["nonProcessRunLastTimeWrittenCount"]++
									}

									if (item["nonProcessRunLastTimeWrittenCount"] <= 10)
									{
										delete item.uploadStatus;
										this.data.setItem(item.id, item);
									}
									else
									{
										this.adjustProcess(stream.id, item, statuses.error, {error : BX.message("UPLOADER_UPLOADING_ERROR3")});
									}
								}
							}
						}
					}
				}
			}
			this.log('stream is done: ' + stream.id, data["status"], this.response);
			this['lastResponse'] = data;
			if (data["status"] == "inprogress")
			{
				BX.onCustomEvent(this, 'continuePackage', [stream, this, data]);
			}
			else
			{
				if (data["status"] == "error")
					this.errorStream(stream, data);
				else
				{
					this.stop();
					BX.onCustomEvent(this, 'donePackage', [stream, this, data]);
				}
			}
		},
		errorStream : function(stream, data)
		{
			var item, err, id, copy;
			this.log('error stream: ' + stream.id, 'status: ', stream.xhr.status, data);
			if (stream && data == "timeout" && this.adjustPostSize(stream, false) && stream["files"])
			{
				for (id in stream["files"])
				{
					if (stream["files"].hasOwnProperty(id))
					{
						if (this.repo.hasItem(id) &&
							BX.type.isArray(stream["files"][id]["files"]) &&
							stream["files"][id]["files"].length > 0)
						{
							item = this.repo.getItem(id);
							if (stream["files"][id]["files"][0]["package"] <= 0 ||
								item["uploadStatus"] !== statuses.inprogress)
							{
								delete item["uploadStatus"];
								delete item.file["uploadStatus"];
								delete item.file["firstChunk"];
								delete item.file["package"];
								delete item.file["packages"];
							}
							else
							{
								item.file["package"] = Math.min(
									stream["files"][id]["files"][0]["package"],
									item.file["package"]);
							}
							if (item.file["copies"])
							{
								item.file["copies"].reset();
								while((copy = item.file["copies"].getNext()) && copy)
								{
									delete copy["uploadStatus"];
									delete copy["firstChunk"];
									delete copy["package"];
									delete copy["packages"];
								}
								item.file["copies"].reset();
							}

							if (!this.data.hasItem(id))
							{
								this.result.removeItem(id);
								this.data.unshiftItem(id, item);
							}
						}
					}
				}
				BX.onCustomEvent(this, 'resendPackage', [stream, this, data]);
			}
			else
			{
				this.stop();
				var defaultTextError = (data == "timeout" ? BX.message("UPLOADER_UPLOADING_ERROR5") : BX.message("UPLOADER_UPLOADING_ERROR1"));
				data = (data || {});
				data["files"] = (data["files"] ? data["files"] : {});
				if ((item = this.repo.getFirst()) && item)
				{
					do
					{
						if (!this.result.hasItem(item.id))
						{
							if (data.files && data.files[item.id])
								err = data.files[item.id];
							else if (BX.type.isNotEmptyString(data["error"]))
								err = data;
							else if (BX.type.isArray(data["errors"]))
							{
								err = {error : ""};
								for (var ii = 0; ii < data["errors"].length; ii++)
								{
									err.error += (BX.type.isPlainObject(data["errors"][ii]) && data["errors"][ii]["message"] ? data["errors"][ii]["message"] : data["errors"][ii]);
								}
							}
							else
								err = {error : defaultTextError};
							this.adjustProcess(stream.id, item, statuses.error, err);
						}
					} while ((item = this.repo.getNext()) && item);
				}
				BX.onCustomEvent(this, 'errorPackage', [stream, this, data]);
			}
		},
		progressStream : function(stream, procent)
		{
			var id;
			stream.files = (stream.files || {});
			for (id in stream.files)
			{
				if (stream.files.hasOwnProperty(id))
				{
					this.adjustProcess(stream.id, this.repo.getItem(id), statuses.inprogress, procent);
				}
			}
			BX.onCustomEvent(this, 'processPackage', [stream, this, procent]);
		}
	};

	BX.UploaderStream = function(_id, streamsManager)
	{
		this.id = 'stream' + _id;
		this._id = _id;
		this.manager = streamsManager;
		this._onsuccess = BX.delegate(this.onsuccess, this);
		this._onfailure = BX.delegate(this.onfailure, this);
		this._onerror = BX.delegate(this.onerror, this);
		this._onprogress = BX.delegate(this.onprogress, this);
	};
	BX.UploaderStream.prototype =
	{
		xhr : {},
		init : function(pack)
		{
			this["pIndex"] = pack.id;
			this.pack = pack;
			this.files = {};
			this.filesCount = 0;
			this.filesSize = 0;
			this.postSize = pack.post.size;
		},
		send : function(fd)
		{
			if (fd && fd.local === true)
			{
				BX.adjust(fd.form, { attrs : { action: fd.action} } );
				BX.ajax.submit(fd.form, BX.proxy(function(data) {
					data = BX.util.htmlspecialcharsback(data);
					while (/^<(.*?)>(.*?)<(.*?)>$/gi.test(data))
						data = data.replace(/^<(.*?)>(.*?)<(.*?)>$/gi, "$2");
					while (/^<([^<>]+)>(.*?)/gi.test(data))
						data = data.replace(/^<(.*?)>(.*?)/gi, "$2");
					while (/(.+?)<([^<>]+)>$/gi.test(data))
						data = data.replace(/(.+?)<([^<>]+)>$/gi, "$1");

					var res = BX.parseJSON(data, {});

					if (!!res)
					{
						this.onsuccess(res);
					}
					else
					{
						this.onfailure("processing", data);
					}
				}, this) );
				this.onprogress(90);
			}
			else if (fd)
			{
				this.xhr = BX.ajax({
					'method': 'POST',
					'dataType': 'json',
					'data' : fd,
					'url': fd.action,
					'onsuccess': this._onsuccess,
					'onfailure': this._onfailure,
					'onerror': this._onerror,
					'start': false,
					'preparePost':false,
					'processData':true,
					'skipAuthCheck': true,
					'timeout' : settings.maxTimeForUploadFile
				});
				this.xhr.upload.addEventListener('progress', this._onprogress, false);
				var d = new Date();
				this.xhr.startTime = d.getTime();
				this.xhr.send(fd);
			}
			else
			{
				this.onfailure("empty", null);
			}
		},
		onsuccess : function(data)
		{
			var d = new Date();
			this.xhr.finishTime = d.getTime();
			try
			{
				if (typeof data == "object" && data && data["files"] && data["status"] !== "error")
					BX.onCustomEvent(this, 'onsuccess', [this, data]);
				else
					BX.onCustomEvent(this, 'onfailure', [this, data]);
			}
			catch (e)
			{
				BX.debug(e);
			}
			BX.onCustomEvent(this, 'onrelease', [this]);
		},
		onfailure : function(status, e)
		{
			var d = new Date(), data = (e && e["data"] ? BX.parseJSON(e["data"], {}) : "");

			if (BX.message("bxUploaderLog") === "Y" && status === "processing")
			{
				BX.ajax.post(
					"/bitrix/tools/upload.php?action=error",
					{
						sessid : BX.bitrix_sessid(),
						path : window.location.pathname,
						data : e["data"]
					}
				);
			}
			this.xhr.finishTime = d.getTime();
			BX.onCustomEvent(this, 'onfailure', [this, data]);
			BX.onCustomEvent(this, 'onrelease', [this]);
		},
		onerror : function()
		{
			var d = new Date();
			this.xhr.finishTime = d.getTime();
			this.onfailure.apply(arguments);
		},
		onprogress : function(e)
		{
			var procent = 15;
			if(typeof e == "object" && e.lengthComputable) {
				procent = e.loaded * 100 / (e["total"] || e["totalSize"]);
			}
			else if (e > procent)
				procent = e;
			procent = (procent > 5 ? procent : 5);

			BX.onCustomEvent(this, 'onprogress', [this, procent]);
			return procent;
		},
		kill : function()
		{
			BX.DoNothing();
			BX.onCustomEvent(this, 'onkill', [this]);
		},
		restore : function()
		{
			this.manager.restore(this);
		}
	};

	BX.UploaderStreams = function(count, uploader)
	{
		this.streams = new BX.UploaderUtils.Hash();
		this.killedStreams = new BX.UploaderUtils.Hash();
		this.packages = new BX.UploaderUtils.Hash();
		this.uploaded = uploader;
		this.timeout = 3000; // time between streams
		this._exec = BX.delegate(this.exec, this);
		this._restore = BX.delegate(this.restore, this);
		this._kill = BX.delegate(this.kill, this);
		this.count = Math.min(5, (count > 1 ? count : 1));
		this.status = statuses.ready;

	};
	BX.UploaderStreams.prototype = {
		init : function(pack, handler)
		{
			if (this.package !== pack)
			{
				this.package = pack;
				this.package.log('streams are occupied', handler);
				this.packages.setItem(pack.id, pack.post); // For compatibility
				this.handler = handler;
				var count = this.count, stream;
				while ((stream = this.streams.getFirst()) && stream)
				{
					this.streams.removeItem(stream.id);
					stream = null;
				}
				this.streams = new BX.UploaderUtils.Hash();
				while (count-- > 0)
				{
					stream = new BX.UploaderStream(count, this);
					BX.addCustomEvent(stream, 'onrelease', this._restore);
					BX.addCustomEvent(stream, 'onkill', this._kill);
					this.streams.setItem(stream.id, stream);
				}
			}
			this.start();
		},
		exec : function()
		{
			if (this.status == statuses.ready)
			{
				this.package.log('streams are in executing');
				var stream = this.streams.getFirst();
				if (stream)
				{
					this.streams.removeItem(stream.id);
					if (this.streams.length > 0)
					{
						setTimeout(this._exec, this.timeout);
					}
					this.handler(stream); // return to package class
				}
			}
			else
			{
				this.package.log('streams are locked');
			}
		},
		restore : function(stream)
		{
			this.streams.setItem(stream.id, stream);
			BX.defer_proxy(this.exec, this)();
		},
		kill : function(stream)
		{
			this.killedStreams.setItem(stream.id, stream);
			if (this.killedStreams.length == this.count)
			{
				BX.onCustomEvent(this, 'onrelease', [this, stream]);
			}
		},
		start : function()
		{
			this.status = statuses.ready;
			this.exec();
		},
		stop : function()
		{
			this.status = statuses.stopped;
		}
	};
	BX.Uploader.getVersion = function() {
		return "1";
	}
}(window));

/* End */
;
; /* Start:"a:4:{s:4:"full";s:58:"/bitrix/js/main/core/core_uploader/file.js?153943333138322";s:6:"source";s:42:"/bitrix/js/main/core/core_uploader/file.js";s:3:"min";s:0:"";s:3:"map";s:0:"";}"*/
;(function(window){
	if (window.BX["UploaderFile"])
		return false;
	var getOrientation = (function(){
		var exif = {
			tags : {
				// 0x0100 : "ImageWidth",
				// 0x0101 : "ImageHeight",
				// 0x8769 : "ExifIFDPointer",
				// 0x8825 : "GPSInfoIFDPointer",
				// 0xA005 : "InteroperabilityIFDPointer",
				// 0x0102 : "BitsPerSample",
				// 0x0103 : "Compression",
				// 0x0106 : "PhotometricInterpretation",
				0x0112 : "Orientation",
				// 0x0115 : "SamplesPerPixel",
				// 0x011C : "PlanarConfiguration",
				// 0x0212 : "YCbCrSubSampling",
				// 0x0213 : "YCbCrPositioning",
				// 0x011A : "XResolution",
				// 0x011B : "YResolution",
				// 0x0128 : "ResolutionUnit",
				// 0x0111 : "StripOffsets",
				// 0x0116 : "RowsPerStrip",
				// 0x0117 : "StripByteCounts",
				// 0x0201 : "JPEGInterchangeFormat",
				// 0x0202 : "JPEGInterchangeFormatLength",
				// 0x012D : "TransferFunction",
				// 0x013E : "WhitePoint",
				// 0x013F : "PrimaryChromaticities",
				// 0x0211 : "YCbCrCoefficients",
				// 0x0214 : "ReferenceBlackWhite",
				// 0x0132 : "DateTime",
				// 0x010E : "ImageDescription",
				// 0x010F : "Make",
				// 0x0110 : "Model",
				// 0x0131 : "Software",
				// 0x013B : "Artist",
				// 0x8298 : "Copyright"
			},
			getStringFromDB : function (buffer, start, length) {
				var outstr = "", n;
				for (n = start; n < start+length; n++) {
					outstr += String.fromCharCode(buffer.getUint8(n));
				}
				return outstr;
			},
			readTags : function(file, tiffStart, dirStart, strings, bigEnd) {
				var entries = file.getUint16(dirStart, !bigEnd),
					tags = {},
					entryOffset, tag,
					i,
					l = 0;
				for (i in strings)
				{
					if (strings.hasOwnProperty(i))
						l++;
				}

				for (i = 0; i < entries; i++)
				{
					entryOffset = dirStart + i*12 + 2;
					tag = strings[file.getUint16(entryOffset, !bigEnd)];
					tags[tag] = exif.readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);
					l--;
					if (l <= 0)
						break;
				}
				return tags;
			},
			readTagValue : function(file, entryOffset, tiffStart, dirStart, bigEnd) {
				var type = file.getUint16(entryOffset+2, !bigEnd),
					numValues = file.getUint32(entryOffset+4, !bigEnd),
					valueOffset = file.getUint32(entryOffset+8, !bigEnd) + tiffStart,
					offset,
					vals, val, n,
					numerator, denominator;

				switch (type)
				{
					case 1: // byte, 8-bit unsigned int
					case 7: // undefined, 8-bit byte, value depending on field
						if (numValues == 1) {
							return file.getUint8(entryOffset + 8, !bigEnd);
						} else {
							offset = numValues > 4 ? valueOffset : (entryOffset + 8);
							vals = [];
							for (n=0;n<numValues;n++) {
								vals[n] = file.getUint8(offset + n);
							}
							return vals;
						}
					case 2: // ascii, 8-bit byte
						offset = numValues > 4 ? valueOffset : (entryOffset + 8);
						return exif.getStringFromDB(file, offset, numValues-1);
					case 3: // short, 16 bit int
						if (numValues == 1) {
							return file.getUint16(entryOffset + 8, !bigEnd);
						} else {
							offset = numValues > 2 ? valueOffset : (entryOffset + 8);
							vals = [];
							for (n=0;n<numValues;n++) {
								vals[n] = file.getUint16(offset + 2*n, !bigEnd);
							}
							return vals;
						}
					case 4: // long, 32 bit int
						if (numValues == 1) {
							return file.getUint32(entryOffset + 8, !bigEnd);
						} else {
							vals = [];
							for (n=0;n<numValues;n++) {
								vals[n] = file.getUint32(valueOffset + 4*n, !bigEnd);
							}
							return vals;
						}
					case 5:    // rational = two long values, first is numerator, second is denominator
						if (numValues == 1) {
							numerator = file.getUint32(valueOffset, !bigEnd);
							denominator = file.getUint32(valueOffset+4, !bigEnd);
							val = new Number(numerator / denominator);
							val.numerator = numerator;
							val.denominator = denominator;
							return val;
						} else {
							vals = [];
							for (n=0;n<numValues;n++) {
								numerator = file.getUint32(valueOffset + 8*n, !bigEnd);
								denominator = file.getUint32(valueOffset+4 + 8*n, !bigEnd);
								vals[n] = new Number(numerator / denominator);
								vals[n].numerator = numerator;
								vals[n].denominator = denominator;
							}
							return vals;
						}
					case 9: // slong, 32 bit signed int
						if (numValues == 1) {
							return file.getInt32(entryOffset + 8, !bigEnd);
						} else {
							vals = [];
							for (n=0;n<numValues;n++) {
								vals[n] = file.getInt32(valueOffset + 4*n, !bigEnd);
							}
							return vals;
						}
					case 10: // signed rational, two slongs, first is numerator, second is denominator
						if (numValues == 1) {
							return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset+4, !bigEnd);
						} else {
							vals = [];
							for (n=0;n<numValues;n++) {
								vals[n] = file.getInt32(valueOffset + 8*n, !bigEnd) / file.getInt32(valueOffset+4 + 8*n, !bigEnd);
							}
							return vals;
						}
				}
			},
			readData : function (file, start) {
				if (exif.getStringFromDB(file, start, 4) != "Exif")
				{
					return false;
				}

				var bigEnd,
					tiffOffset = start + 6;

				// test for TIFF validity and endianness
				if (file.getUint16(tiffOffset) == 0x4949)
				{
					bigEnd = false;
				}
				else if (file.getUint16(tiffOffset) == 0x4D4D)
				{
					bigEnd = true;
				}
				else
				{
					return false;
				}

				if (file.getUint16(tiffOffset+2, !bigEnd) != 0x002A)
				{
					return false;
				}

				var firstIFDOffset = file.getUint32(tiffOffset + 4, !bigEnd);

				if (firstIFDOffset < 0x00000008)
				{
					return false;
				}

				return exif.readTags(file, tiffOffset, tiffOffset + firstIFDOffset, exif.tags, bigEnd);
			},
			readBase64 : function (base64)
			{
				base64 = base64.replace(/^data\:([^\;]+)\;base64,/gmi, '');
				var binary_string =  window.atob(base64), //decode base64
					len = binary_string.length,
					bytes = new Uint8Array(len);
				for (var i = 0; i < len; i++) {
					bytes[i] = binary_string.charCodeAt(i);
				}
				var dataView = new DataView(bytes.buffer);
				if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8))
				{
					return false; // not a valid jpeg
				}

				var offset = 2,
					length = bytes.buffer.byteLength,
					marker,
					result = false;
				while (offset < length)
				{
					if (dataView.getUint8(offset) != 0xFF) {
						break; // not a valid marker, something is wrong
					}

					marker = dataView.getUint8(offset + 1);

					// we could implement handling for other markers here,
					// but we're only looking for 0xFFE1 for EXIF data

					if (marker == 225)
					{
						result = exif.readData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);
						break;
					}
					else
					{
						offset += 2 + dataView.getUint16(offset+2);
					}
				}
				return result;
			}
		};
		return function(base64){
			if (BX.type.isString(base64))
			{
				try {
					var tags = exif.readBase64(base64);
					if(tags && tags["Orientation"])
						return tags["Orientation"];
				}
				catch (e)
				{
				}
			}
			return false;
		};
	})(),
		setOrientation = function(image, cnv, ctx, exifOrientation) {
			var width = image.width,
				height = image.height;
			if ([5,6,7,8].indexOf(exifOrientation) >= 0)
			{
				width = image.height;
				height = image.width;
			}

			BX.adjust(cnv, {props: {width: width, height: height}});

			ctx.save();
			switch(exifOrientation) {
				case 2:
					// $img.addClass('flip');
					ctx.scale(-1, 1);
					ctx.translate(-cnv.width, 0);
					break;
				case 3:
					// $img.addClass('rotate-180');
					ctx.translate(cnv.width, cnv.height);
					ctx.rotate(Math.PI);
					break;
				case 4:
					// $img.addClass('flip-and-rotate-180');
					ctx.scale(-1, 1);
					ctx.translate(0, cnv.height);
					ctx.rotate(Math.PI);
					break;
				case 5:
					// $img.addClass('flip-and-rotate-90');
					ctx.scale(-1, 1);
					ctx.translate(0, 0);
					ctx.rotate(Math.PI / 2);
					break;
				case 6:
					// $img.addClass('rotate-90');
					ctx.translate(cnv.width, 0);
					ctx.rotate(Math.PI / 2);
					break;
				case 7:
					// $img.addClass('flip-and-rotate-90');
					ctx.scale(-1, 1);
					ctx.translate(-cnv.width, cnv.height);
					ctx.rotate(Math.PI * 3 / 2);
					break;
				case 8:
					// $img.addClass('rotate-270');
					ctx.translate(0, cnv.height);
					ctx.rotate(Math.PI * 3 / 2);
					break;
			}
			ctx.drawImage(image, 0, 0);
			ctx.restore();
		};
	var BX = window.BX,
		statuses = { "new" : 0, ready : 1, preparing : 2, inprogress : 3, done : 4, failed : 5, stopped : 6, changed : 7, uploaded : 8},
		cnvConstr = (function(){
			var cnvConstructor = function(timelimit) {
				this.timeLimit = (typeof timelimit === "number" && timelimit > 0 ? timelimit : 50);
				this.status = statuses.ready;
				this.queue = new BX.UploaderUtils.Hash();
				this.id = (new Date()).getTime();
			};
			cnvConstructor.prototype = {
				counter : 0,
				active : null,
				image : null,
				getImage : function() {
					if (!this.image)
						this.image = new Image();
					return this.image;
				},
				canvas : null,
				getCanvas : function() {
					if (!this.canvas)
					{
						this.canvas = BX.create('CANVAS', {style : {display: "none"}});
						document.body.appendChild(this.canvas);
					}

					return this.canvas;
				},
				context : null,
				getContext : function() {
					if (!this.context && this.getCanvas()["getContext"])
						this.context = this.getCanvas().getContext('2d');
					return this.context;
				},
				reader : null,
				getReader : function() {
					if (!this.reader && window["FileReader"])
						this.reader = new FileReader();
					return this.reader;
				},
				load : function(file, callback, id, callbackFail) {
					if (this.active !== null || (this.getReader() && this.getReader().readyState == 1))
						return;

					this.counter++;
					this.active = file;
					var image = this.getImage();
					BX.unbindAll(image);
					image.onload = function(){};
					image.onerror = function(){};

					/* Almost all browsers cache images from local resource except of FF on 06.03.2017. It appears that
					FF collect src and does not abort image uploading when src is changed. And we had a bug when in
					onload event we got e.target.src of one element but source of image was from '/bitrix/images/1.gif'. */
					// TODO check if chrome and other browsers cache local files for now. If it does not then delete next 2 strings
					if (!BX.browser.IsFirefox())
						image.src = '/bitrix/images/1.gif';

					/** For Garbage collector */
					this.onload = null;
					delete this.onload;
					this.onerror = null;
					delete this.onerror;

					this.onload = BX.delegate(function(e){
						if (e && e.target && e.target.src && e.target.src.substr(-20) == "/bitrix/images/1.gif")
							return;
						if (!!callback)
						{
							try {
								callback(BX.proxy_context, this.getCanvas(), this.getContext(), getOrientation((((e && e.target && e.target.src) ? e.target.src : (BX.proxy_context || null)))));
							}
							catch (e)
							{
								BX.debug(e);
							}
						}
						if (!!id)
						{
							this.queue.removeItem(id);
							setTimeout(BX.proxy(function() {
								this.active = null;
								this.exec();
							}, this), this.timeLimit);
						}
						else
							this.active = null;
					}, this);
					this.onerror = BX.delegate(function(){
						if (!!callbackFail)
						{
							try
							{
								callbackFail(BX.proxy_context);
							}
							catch (e)
							{
								BX.debug(e);
							}
						}
						if (!!id)
						{
							this.queue.removeItem(id);
							setTimeout(BX.proxy(function() {
								this.active = null;
								this.exec();
							}, this), this.timeLimit);
						}
						else
							this.active = null;
					}, this);

					image.name = file.name;

					image.onload = this.onload;
					image.onerror = this.onerror;

					var res = Object.prototype.toString.call(file);
					if (file["tmp_url"])
					{
						image.src = file["tmp_url"] + (file["tmp_url"].indexOf("?") > 0 ? '&' : '?') + 'imageUploader' + this.id + this.counter;
					}
					else if (res !== '[object File]' && res !== '[object Blob]')
					{
						this.onerror(null);
					}
					else if (window["URL"])
					{
						image.src = window["URL"]["createObjectURL"](file);
					}
					else if (this.getReader() !== null)
					{
						this.__readerOnLoad = null;
						delete this.__readerOnLoad;
						this.__readerOnLoad = BX.delegate(function(e) {
							this.__readerOnLoad = null;
							delete this.__readerOnLoad;
							image.src = e.target.result;
						}, this);
						this.getReader().onloadend = this.__readerOnLoad;
						this.getReader().onerror = BX.proxy(function(e) { this.onerror(null); }, this);
						this.getReader().readAsDataURL(file);
					}
				},
				push : function(file, callback, failCallback) {
					var id = BX.UploaderUtils.getId();
					this.queue.setItem(id, [id, file, callback, failCallback]);
					this.exec();
				},
				exec : function() {
					var item = this.queue.getFirst();
					if (!!item)
						this.load(item[1], item[2], item[0], item[3]);
				},
				pack : function(fileType) {
					return  BX.UploaderUtils.dataURLToBlob(this.getCanvas().toDataURL(fileType));
				}
			};
			return cnvConstructor;
		})();
	BX.UploaderFileCnvConstr = cnvConstr;
	BX.UploaderFileFileLoader = (function(){
		var d = function(timelimit) {
			this.timeLimit = (typeof timelimit === "number" && timelimit > 0 ? timelimit : 50);
			this.status = statuses.ready;
			this.queue = new BX.UploaderUtils.Hash();
			this._exec = BX.delegate(this.exec, this);
		};
		d.prototype = {
			xhr : null,
			goToNext : function(id)
			{
				delete this.xhr;
				this.xhr = null;
				this.queue.removeItem(id);
				this.status = statuses.ready;
				setTimeout(this._exec, this.timeLimit);
			},
			load : function(id, path, onsuccess, onfailure)
			{
				if (this.status != statuses.ready)
					return;
				this.status = statuses.inprogress;
				var _this = this;
				this.xhr = BX.ajax({
					'method': 'GET',
					'data' : '',
					'url': path,
					'onsuccess': function(blob){if (blob === null){onfailure(blob);} else {onsuccess(blob);} _this.goToNext(id);},
					'onfailure': function(blob){onfailure(blob); _this.goToNext(id);},
					'start': false,
					'preparePost':false,
					'processData':false
				});
				this.xhr.withCredentials = true;
				this.xhr.responseType = 'blob';

				this.xhr.send();
			},
			push : function(path, onsuccess, onfailure)
			{
				var id = BX.UploaderUtils.getId();
				this.queue.setItem(id, [id, path, onsuccess, onfailure]);
				this.exec();
			},
			exec : function()
			{
				var item = this.queue.getFirst();
				if (!!item)
					this.load(item[0], item[1], item[2], item[3]);
			}
		};
		return d;
	})();
	var prvw = new cnvConstr(), upld = new cnvConstr(), edtr = new cnvConstr(), canvas = BX.create('CANVAS'), ctx;
	/**
	 * @return {BX.UploaderFile}
	 * @file file
	 * @params array
	 * @limits array
	 * @caller {BX.Uploader}
	 * You should work with params["fields"] in case you want to change visual part
	 */
var mobileNames = {};
	BX.UploaderFile = function (file, params, limits, caller)
	{
		this.dialogName = (this.dialogName ? this.dialogName : "BX.UploaderFile");
		this.file = file;
		this.id = (file['id'] || 'file' + BX.UploaderUtils.getId());
		this.name = file.name;
		this.isNode = false;
		if (BX.type.isDomNode(file))
		{
			this.isNode = true;
			this.name = BX.UploaderUtils.getFileNameOnly(file.value);
			if (/\[(.+?)\]/.test(file.name))
			{
				var tmp = /\[(.+?)\]/.exec(file.name);
				this.id = tmp[1];
			}
			this.file.bxuHandler = this;
		}
		else if (file["tmp_url"] && !file["name"])
		{
			this.name = BX.UploaderUtils.getFileNameOnly(file["tmp_url"]);
		}
		this.preview = '<span id="' + this.id + 'Canvas" class="bx-bxu-canvas"></span>';
		this.nameWithoutExt = (this.name.lastIndexOf('.') > 0 ? this.name.substr(0, this.name.lastIndexOf('.')) : this.name);
		this.ext = this.name.substr(this.nameWithoutExt.length + 1);

		if (/iPhone|iPad|iPod/i.test(navigator.userAgent) && this.nameWithoutExt == "image")
		{
			var nameWithoutExt = 'mobile_' + BX.date.format("Ymd_His");
			mobileNames[nameWithoutExt] = (mobileNames[nameWithoutExt] || 0);
			this.nameWithoutExt = nameWithoutExt + (mobileNames[nameWithoutExt] > 0 ? ("_" + mobileNames[nameWithoutExt]) : "");
			this.name = this.nameWithoutExt + (BX.type.isNotEmptyString(this.ext) ? ("." + this.ext) : "");
			mobileNames[nameWithoutExt]++;
		}

		this.size = '';
		if (file.size)
			this.size = BX.UploaderUtils.getFormattedSize(file.size, 0);
		this.type = file.type;
		this.status = statuses["new"];
		this.limits = limits;
		this.caller = caller;
		this.fields = {
			thumb : {
				tagName : 'SPAN',
				template : '<div class="someclass">#preview#<div>#name#</div>',
				editorTemplate : '<div class="someeditorclass"><div>#name#</div>',
				className : "bx-bxu-thumb-thumb",
				placeHolder : null
			},
			preview : {
				params : { width : 400, height : 400 },
				template : "#preview#",
				editorParams : { width : 1024, height : 860 },
				editorTemplate : '<span>#preview#</span>',
				className : "bx-bxu-thumb-preview",
				placeHolder : null,
				events : {
					click : BX.delegate(this.clickFile, this)
				},
				type : "html"
			},
			name : {
				template : "#name#",
				editorTemplate : '<span><input type="text" name="name" value="#name#" /></span>',
				className : "bx-bxu-thumb-name",
				placeHolder : null
			},
			type : {
				template : "#type#",
				editorTemplate : '#type#',
				className : "bx-bxu-thumb-type",
				placeHolder : null
			}
		};

		if (!!params["fields"])
		{
			var ij, key;
			for (var ii in params["fields"])
			{
				if (params["fields"].hasOwnProperty(ii))
				{
					if (!!this.fields[ii])
					{
						for (ij in params["fields"][ii])
						{
							if (params["fields"][ii].hasOwnProperty(ij))
							{
								this.fields[ii][ij] = params["fields"][ii][ij];
							}
						}
					}
					else
						this.fields[ii] = params["fields"][ii];
					key = ii + '';
					if (key.toLowerCase() != "thumb" && key.toLowerCase() != "preview")
					{
						this[key.toLowerCase()] = (!!params["fields"][ii]["value"] ? params["fields"][ii]["value"] : "");
						this.log(key.toLowerCase() + ': ' + this[key.toLowerCase()]);
					}
				}
			}
		}

		BX.onCustomEvent(this, "onFileIsCreated", [this.id, this, this.caller]);
		BX.onCustomEvent(this.caller, "onFileIsCreated", [this.id, this, this.caller]);

		this.makePreview();
		this.preparationStatus = statuses.done;
		return this;
	};
	BX.UploaderFile.prototype = {
		log : function(text)
		{
			BX.UploaderUtils.log('file ' + this.name, text);
		},
		makeThumb : function()
		{
			var template = this.fields.thumb.template, name, ii, events = {}, node, jj;
			for (ii in this.fields)
			{
				if (this.fields.hasOwnProperty(ii))
				{
					if (this.fields[ii].template && this.fields[ii].template.indexOf('#' + ii + '#') >= 0)
					{
						name = this.id + ii.toUpperCase().substr(0, 1) + ii.substr(1);
						node = this.setProps(ii, this[ii], true);
						template = template.replace('#' + ii + '#', '<span id="' + name + '" class="' + this.fields[ii]["className"] + '">' + (
							BX.type.isNotEmptyString(node.html) ? node.html.replace("#", "<\x19>") : node.html) + '</span>');
						for (jj in node.events)
						{
							if (node.events.hasOwnProperty(jj))
							{
								events[jj] = node.events[jj];
							}
						}
						if (!!this.fields[ii].events)
							events[name] = this.fields[ii].events;
					}
				}
			}
			var res, patt = [], repl = [], tmp;
			while ((res = /#([^\\<\\>\\"\\']+?)#/gi.exec(template)) && !!res)
			{
				if (this[res[1]] !== undefined)
				{
					template = template.replace(res[0], BX.type.isNotEmptyString(this[res[1]]) ? this[res[1]].replace("#", "<\x19>") : this[res[1]]);
				}
				else
				{
					tmp = "<\x18" + patt.length + ">";
					patt.push(tmp);
					repl.push(res[0]);
					template = template.replace(res[0], tmp);
				}
			}
			while ((res = patt.shift()) && res)
			{
				tmp = repl.shift();
				template = template.replace(res, tmp);
			}
			template = template.replace("<\x19>", "#");
			if (!!this.fields.thumb.tagName)
			{
				res = BX.create(this.fields.thumb.tagName, {
					attrs : {
						id : (this.id + 'Thumb'),
						className : this.fields.thumb.className
					},
					events : this.fields.thumb.events,
					html : template
					}
				);
			}
			else
			{
				res = template;
			}
			this.__makeThumbEventsObj = events;
			this.__makeThumbEvents = BX.delegate(function()
			{
				var ii, jj;
				for (ii in events)
				{
					if (events.hasOwnProperty(ii) && BX(ii))
					{
						for (jj in events[ii])
						{
							if (events[ii].hasOwnProperty(jj))
							{
								BX.bind(BX(ii), jj, events[ii][jj]);
							}
						}
					}
				}
				this.__makeThumbEvents = null;
				delete this.__makeThumbEvents;
			}, this);
			BX.addCustomEvent(this, "onFileIsAppended", this.__makeThumbEvents);

			if (BX.type.isDomNode(this.file))
			{
				if (BX.type.isString(template))
				{
					this.__bindFileNode = BX.delegate(function(id)
					{
						var node = BX(id + 'Item');
						if (node.tagName == 'TR')
							node.cells[0].appendChild(this.file);
						else if (node.tagName == 'TABLE')
							node.rows[0].cells[0].appendChild(this.file);
						else
							BX(id + 'Item').appendChild(this.file);
						this.__bindFileNode = null;
						delete this.__bindFileNode;
					}, this);
					BX.addCustomEvent(this, "onFileIsAppended", this.__bindFileNode);
				}
				else
				{
					res.appendChild(this.file);
				}
			}
			return res;
		},
		checkProps : function()
		{
			var el2 = BX.UploaderUtils.FormToArray({elements : [BX.proxy_context]}), ii;
			for (ii in el2.data)
			{
				if (el2.data.hasOwnProperty(ii))
					this[ii] = el2.data[ii];
			}
		},
		setProps : function(name, val, bReturn)
		{
			if (typeof name == "string")
			{
				if (name == "size")
					val = BX.UploaderUtils.getFormattedSize(this.file.size, 0);
				if (typeof this[name] != "undefined" && typeof this.fields[name] != "undefined")
				{
					this[name] = val;
					var template = this.fields[name].template.
							replace('#' + name + '#', this.fields[name]["type"] === "html" ? (val || '') : BX.util.htmlspecialchars(val || '')).
							replace(/#id#/gi, this.id),
						fii, fjj, el, result = {html : template, events : {}};

					this.hiddenForm = (!!this.hiddenForm ? this.hiddenForm : BX.create("FORM", { style : { display : "none" } } ));
					this._checkProps = (!!this._checkProps ? this._checkProps : BX.delegate(this.checkProps, this));
					this.hiddenForm.innerHTML = template;
					if (this.hiddenForm.elements.length > 0)
					{
						for (fii = 0; fii < this.hiddenForm.elements.length; fii++)
						{
							el = this.hiddenForm.elements[fii];
							if (typeof this[el.name] != "undefined")
							{
								if (!el.hasAttribute("id"))
									el.setAttribute("id", this.id + name + BX.UploaderUtils.getId());
								result.events[el.id] = {
									blur : this._checkProps
								}

							}
						}
						result.html = this.hiddenForm.innerHTML;
					}
					if (BX(this.hiddenForm))
						BX.remove(this.hiddenForm);
					this.hiddenForm = null;
					delete this.hiddenForm;
					if (bReturn)
						return result;
					var node = this.getPH(name);
					if (!!node)
					{
						node.innerHTML = result.html;
						for (fii in result.events)
						{
							if (result.events.hasOwnProperty(fii))
							{
								for (fjj in result.events[fii])
								{
									if (result.events[fii].hasOwnProperty(fjj))
									{
										BX.bind(BX(fii), fjj, result.events[fii][fjj]);
									}
								}
							}
						}
					}
				}
			}
			else if (!!name)
			{
				for (var ij in name)
				{
					if (name.hasOwnProperty(ij))
					{
						if (this.fields.hasOwnProperty(ij) && ij !== "preview")
							this.setProps(ij, name[ij]);
					}
				}
			}
			return true;
		},
		getProps : function(name)
		{
			if (name == "canvas")
			{
				return BX(this.id + "ProperCanvas");
			}
			else if (typeof name == "string")
			{
				return this[name];
			}
			var data = {};
			for (var ii in this.fields)
			{
				if (this.fields.hasOwnProperty(ii) && (ii !== "preview" && ii !== "thumb"))
				{
					data[ii] = this[ii];
				}
			}
			data["size"] = this.file["size"];
			data["type"] = this["type"];
			if (!!this.copies)
			{
				var copy;
				data["canvases"] = {};
				while ((copy = this.copies.getNext()) && !!copy)
				{
					data["canvases"][copy.id] = { width : copy.width, height : copy.height, name : copy.name };
				}
			}
			return data;
		},
		getThumbs : function()
		{
			return null;
		},
		getPH : function(name)
		{
			name = (typeof name === "string" ? name : "");
			name = name.toLowerCase();
			if (this.fields.hasOwnProperty(name))
			{
				var id = name.substr(0, 1).toUpperCase() + name.substr(1);
				this.fields[name]["placeHolder"] = BX(this.id  + id);
				return this.fields[name]["placeHolder"];
			}
			return null;
		},
		clickFile : function ()
		{
			return false;
		},
		makePreview: function()
		{
			this.status = statuses.ready;
			BX.onCustomEvent(this, "onFileIsInited", [this.id, this, this.caller]);
			BX.onCustomEvent(this.caller, "onFileIsInited", [this.id, this, this.caller]);

			this.log('is initialized as a file');
		},
		preparationStatus : statuses.ready,
		deleteFile: function()
		{
			var ii, events = this.__makeThumbEventsObj;
			for (ii in this.fields)
			{
				if (this.fields.hasOwnProperty(ii))
				{
					if (!!this.fields[ii]["placeHolder"])
					{
						this.fields[ii]["placeHolder"] = null;
						BX.unbindAll(this.fields[ii]["placeHolder"]);
						delete this.fields[ii]["placeHolder"];
					}
				}
			}

			for (ii in events)
			{
				if (events.hasOwnProperty(ii) && BX(ii))
				{
					BX.unbindAll(BX(ii));
				}
			}

			this.file = null;
			delete this.file;

			BX.remove(this.canvas);
			this.canvas = null;
			delete this.canvas;

			BX.onCustomEvent(this.caller, "onFileIsDeleted", [this.id, this, this.caller]);
			BX.onCustomEvent(this, "onFileIsDeleted", [this, this.caller]);
		}
	};
	BX.UploaderImage = function(file, params, limits, caller)
	{
		this.dialogName = "BX.UploaderImage";
		BX.UploaderImage.superclass.constructor.apply(this, arguments);
		this.isImage = true;
		this.copies = new BX.UploaderUtils.Hash();
		this.caller = caller;

		if (!this.isNode && BX.Uploader.getInstanceName() == "BX.Uploader")
		{
			if (!!params["copies"])
			{
				var copies = params["copies"], copy;
				for (var ii in copies)
				{
					if (copies.hasOwnProperty(ii) && !!copies[ii])
					{
						copy = { width : parseInt(copies[ii]['width']), height : parseInt(copies[ii]["height"]), id : ii };
						if (copy['width'] > 0 && copy["height"] > 0)
						{
							this.copies.setItem(ii, copy);
						}
					}
				}
			}
			this.preparationStatus = statuses["new"];
			BX.addCustomEvent(this, "onFileHasToBePrepared", BX.delegate(function()
			{
				this.preparationStatus = statuses.inprogress;
				if (this.status != statuses["new"])
				{
					upld.push(this.file, BX.delegate(this.makeCopies, this));
				}
			}, this));
			BX.addCustomEvent(this, "onUploadDone", BX.delegate(function()
			{
				var copy;
				while ((copy = this.copies.getNext()) && !!copy)
				{
					copy.file = null;
					delete copy.file;
				}
				this.preparationStatus = statuses["new"];
			}, this));
			this.canvas = BX.create('CANVAS', {attrs : { id : this.id + "ProperCanvas" } } );
		}
		else
		{
			this.preparationStatus = statuses.done;
			this.canvas = null;
		}
		return this;
	};
	BX.extend(BX.UploaderImage, BX.UploaderFile);
	BX.UploaderImage.prototype.makePreviewImageWork = function(image, cnv, ctx, exifOrientation)
	{
		exifOrientation = parseInt(exifOrientation);

		var result = null,
			width = cnv.width,
			height = cnv.height;

		if (this.file)
		{
			this.file.width = cnv.width;
			this.file.height = cnv.height;
		}

		if (!!this.canvas)
		{
			setOrientation(image, cnv, ctx, exifOrientation);
			if (this.file)
			{
				this.file.width = cnv.width;
				this.file.height = cnv.height;
				if (exifOrientation)
				{
					this.file.exif = {
						Orientation : exifOrientation
					}
				}
			}
			this.applyFile(cnv, false);
			result = this.canvas;
		}
		else if (BX(this.id + 'Canvas'))
		{
			var res2 = BX.UploaderUtils.scaleImage({width : width, height : height}, this.fields.preview.params),
				props = {
					props : { width : res2.destin.width, height : res2.destin.height, src : image.src },
					attrs : {
						className : (this.file.width > this.file.height ? "landscape" : "portrait")
					}
				};
			switch (exifOrientation)
			{
				case 2:
					props.attrs.className += ' flip'; break;
				case 3:
					props.attrs.className += ' rotate-180'; break;
				case 4:
					props.attrs.className += ' flip-and-rotate-180'; break;
				case 5:
					props.attrs.className += ' flip-and-rotate-270'; break;
				case 6:
					props.attrs.className += ' rotate-90'; break;
				case 7:
					props.attrs.className += ' flip-and-rotate-90'; break;
				case 8:
					props.attrs.className += ' rotate-270'; break;
			}
			result = BX.create("IMG", props);
		}

		BX.onCustomEvent(this, "onFileCanvasIsLoaded", [this.id, this, this.caller, image]);
		BX.onCustomEvent(this.caller, "onFileCanvasIsLoaded", [this.id, this, this.caller, image]);

		if (BX(this.id + 'Canvas'))
			BX(this.id + 'Canvas').appendChild(result);

		return result;
	};

	BX.UploaderImage.prototype.makePreviewImageLoadHandler = function(image, canvas, context, exifOrientation){
		this.makePreviewImageWork(image, canvas, context, exifOrientation);
		this.status = statuses.ready;

		BX.onCustomEvent(this, "onFileIsInited", [this.id, this, this.caller]);
		BX.onCustomEvent(this.caller, "onFileIsInited", [this.id, this, this.caller]);
		this.log('is initialized as an image with preview');
		if (this.preparationStatus == statuses.inprogress)
			this.makeCopies(image, canvas, context, exifOrientation);
		if (this["_makePreviewImageLoadHandler"])
		{
			this._makePreviewImageLoadHandler = null;
			delete this._makePreviewImageLoadHandler;
		}
		if (this["_makePreviewImageFailedHandler"])
		{
			this._makePreviewImageFailedHandler = null;
			delete this._makePreviewImageFailedHandler;
		}
	};

	BX.UploaderImage.prototype.makePreviewImageFailedHandler = function(){
		this.status = statuses.ready;
		this.preparationStatus = statuses.done;

		BX.onCustomEvent(this, "onFileIsInited", [this.id, this, this.caller]);
		BX.onCustomEvent(this.caller, "onFileIsInited", [this.id, this, this.caller]);

		this.log('is initialized without canvas');
		if (this["_makePreviewImageLoadHandler"])
		{
			this._makePreviewImageLoadHandler = null;
			delete this._makePreviewImageLoadHandler;
		}
		if (this["_makePreviewImageFailedHandler"])
		{
			this._makePreviewImageFailedHandler = null;
			delete this._makePreviewImageFailedHandler;
		}
	};
	BX.UploaderImage.prototype.makePreview = function()
	{
		if (!this.isNode)
		{
			this._makePreviewImageLoadHandler = BX.delegate(this.makePreviewImageLoadHandler, this);
			this._makePreviewImageFailedHandler = BX.delegate(this.makePreviewImageFailedHandler, this);
			prvw.push(this.file, this._makePreviewImageLoadHandler, this._makePreviewImageFailedHandler);
		}
		else
		{
			this.status = statuses.ready;
			BX.onCustomEvent(this, "onFileIsInited", [this.id, this, this.caller]);
			BX.onCustomEvent(this.caller, "onFileIsInited", [this.id, this, this.caller]);

			this.log('is initialized as an image without preview');
			if (this.caller.queue.placeHolder)
			{
				this._onFileHasGotPreview = BX.delegate(function(id, item) {

					BX.removeCustomEvent(this, "onFileHasGotPreview", this._onFileHasGotPreview);
					BX.removeCustomEvent(this, "onFileHasNotGotPreview", this._onFileHasNotGotPreview);

					this._makePreviewImageLoadHandler = BX.delegate(function(image){
						image = this.makePreviewImageWork(image);
						BX.onCustomEvent(this, "onFileHasPreview", [item.id, item, image]);
						delete this._makePreviewImageLoadHandler;
						delete this._makePreviewImageFailedHandler;
					}, this);
					this._makePreviewImageFailedHandler = BX.delegate(function(image){
						delete this._makePreviewImageLoadHandler;
						delete this._makePreviewImageFailedHandler;
					}, this);
					prvw.push({tmp_url : item.file.url}, this._makePreviewImageLoadHandler, this._makePreviewImageFailedHandler);
				}, this);
				this._onFileHasNotGotPreview = BX.delegate(function(id){
					if (id == this.id)
					{
						BX.removeCustomEvent(this, "onFileHasGotPreview", this._onFileHasGotPreview);
						BX.removeCustomEvent(this, "onFileHasNotGotPreview", this._onFileHasNotGotPreview);
					}
				}, this);
				BX.addCustomEvent(this, "onFileHasGotPreview", this._onFileHasGotPreview);
				BX.addCustomEvent(this, "onFileHasNotGotPreview", this._onFileHasNotGotPreview);
				BX.onCustomEvent(this.caller, "onFileNeedsPreview", [this.id, this, this.caller]);
			}
		}
		return true;
	};
	BX.UploaderImage.prototype.checkPreview = function()
	{
		// TODO check preview
	};
	BX.UploaderImage.prototype.applyFile = function(cnv, params)
	{
		this.checkPreview();

		if (!!params && params.data )
			this.setProps(params.data);

		var realScale = BX.UploaderUtils.scaleImage(cnv, {width : this.limits["uploadFileWidth"], height : this.limits["uploadFileHeight"]}),
			prvwScale = BX.UploaderUtils.scaleImage(cnv, this.fields.preview.params),
			prvwProps = {
				props : { width : prvwScale.destin.width, height : prvwScale.destin.height },
				attrs : {
					className : "bx-bxu-proper-canvas"+(prvwScale.destin.width > prvwScale.destin.height ? " landscape" : " portrait")
				}
			};

		if (realScale.bNeedCreatePicture || !!params)
		{
			BX.adjust(canvas, { props : { width : realScale.destin.width, height : realScale.destin.height } } );
			ctx = canvas.getContext('2d');
			ctx.drawImage(cnv,
				realScale.source.x, realScale.source.y, realScale.source.width, realScale.source.height,
				realScale.destin.x, realScale.destin.y, realScale.destin.width, realScale.destin.height
			);

			var dataURI = canvas.toDataURL(this.file.type);
			this.file = BX.UploaderUtils.dataURLToBlob(dataURI);
		}

		this.file.name = this.name;
		this.file.width = realScale.destin.width;
		this.file.height = realScale.destin.height;

		BX.adjust(this.canvas, prvwProps);

		ctx = this.canvas.getContext('2d');
		ctx.drawImage(cnv,
			prvwScale.source.x, prvwScale.source.y, prvwScale.source.width, prvwScale.source.height,
			prvwScale.destin.x, prvwScale.destin.y, prvwScale.destin.width, prvwScale.destin.height
		);

		ctx = null;
		cnv = null;

		this.setProps('size');
		this.status = statuses.changed;
	};
	BX.UploaderImage.prototype.clickFile = function()
	{
		if (!this.canvas || !BX["CanvasEditor"] || this.status == statuses["new"])
			return false;
		if (!this.__showEditor)
		{
			this.__showEditor = BX.delegate(this.showEditor, this);
			this.eFunc = {
				"apply" : BX.delegate(this.applyFile, this),
				"delete" : BX.delegate(this.deleteFile, this),
				"clear" : BX.delegate(function()
				{
					BX.removeCustomEvent(editor, "onApplyCanvas", this.eFunc["apply"]);
					BX.removeCustomEvent(editor, "onDeleteCanvas", this.eFunc["delete"]);
					BX.removeCustomEvent(editor, "onClose", this.eFunc["clear"]);
				}, this)
			};
		}
		var template = this.fields.thumb.editorTemplate, name;
		for (var ii in this.fields)
		{
			if (this.fields.hasOwnProperty(ii))
			{
				name = ii.substr(0, 1).toUpperCase() + ii.substr(1);
				template = template.replace('#' + ii + '#',
					(ii === "preview" ? "" :
						('<span id="' + this.id + name + 'Editor" class="' + this.fields[ii]["className"] + '">' +
						this.fields[ii]["editorTemplate"].replace('#' + ii + '#', (!!this[ii] ? BX.util.htmlspecialchars(this[ii]) : '')) + '</span>')));
			}
		}

		BX.adjust(edtr.getCanvas(), { props : { width : this.file.width, height : this.file.height } } );
		edtr.getContext().drawImage(this.canvas,
			0, 0, this.canvas.width, this.canvas.height,
			0, 0, edtr.getCanvas().width, edtr.getCanvas().height);
		var editor = BX.CanvasEditor.show(edtr.getCanvas(), {title : this.name, template : template});

		BX.addCustomEvent(editor, "onApplyCanvas", this.eFunc["apply"]);
		BX.addCustomEvent(editor, "onDeleteCanvas", this.eFunc["delete"]);
		BX.addCustomEvent(editor, "onClose", this.eFunc["clear"]);
		BX.onCustomEvent(this, "onCanvasEditorIsCreated", [editor, this]);

		edtr.push(this.file, this.__showEditor);
		this.editor = editor;
		return false;
	};
	BX.UploaderImage.prototype.showEditor = function(image, canvas, context, exifOrientation)
	{
		BX.adjust(canvas, { props : { width : this.file.width, height : this.file.height } } );
		setOrientation(image, canvas, context, exifOrientation);
		this.editor.copyCanvas(canvas);
	};
	BX.UploaderImage.prototype.makeCopies = function(image, cnv, ctx, exifOrientation)
	{
		var copy, res, dataURI, result,
			context = canvas.getContext('2d');
		setOrientation(image, canvas, context, exifOrientation);
		while ((copy = this.copies.getNext()) && !!copy)
		{
			res = BX.UploaderUtils.scaleImage(canvas, copy);
			BX.adjust(cnv, {props : { width : res.destin.width, height : res.destin.height } } );
			ctx.drawImage(canvas,
				res.source.x, res.source.y, res.source.width, res.source.height,
				res.destin.x, res.destin.y, res.destin.width, res.destin.height
			);

			dataURI = cnv.toDataURL(this.file.type);
			result = BX.UploaderUtils.dataURLToBlob(dataURI);
			result.width = cnv.width;
			result.height = cnv.height;
			result.name = this.name;
			result.thumb = copy.id;
			result.canvases = this.copies.length;
			result.canvas = this.copies.pointer - 1;
			copy.file = result;
		}
		this.preparationStatus = statuses.done;
	};
	BX.UploaderImage.prototype.getThumbs = function(name)
	{
		if (name == "getCount")
			return this.copies.length;

		var res = (typeof name == "string" ? this.copies.getItem(name) : this.copies.getNext());

		if (!!res)
			return res.file;
		return null;
	};
	return true;
}(window));

/* End */
;
; /* Start:"a:4:{s:4:"full";s:63:"/bitrix/js/main/core/core_uploader/queue.min.js?151801858511002";s:6:"source";s:43:"/bitrix/js/main/core/core_uploader/queue.js";s:3:"min";s:0:"";s:3:"map";s:0:"";}"*/
(function(e){if(e.BX["UploaderQueue"])return false;var t=e.BX,i={new:0,ready:1,preparing:2,inprogress:3,done:4,failed:5,stopped:6,changed:7,uploaded:8};t.UploaderQueue=function(e,i,s){this.dialogName="BX.UploaderQueue";i=!!i?i:{};this.limits={phpPostMaxSize:i["phpPostMaxSize"],phpUploadMaxFilesize:i["phpUploadMaxFilesize"],uploadMaxFilesize:i["uploadMaxFilesize"]>0?i["uploadMaxFilesize"]:0,uploadFileWidth:i["uploadFileWidth"]>0?i["uploadFileWidth"]:0,uploadFileHeight:i["uploadFileHeight"]>0?i["uploadFileHeight"]:0};this.placeHolder=t(e["placeHolder"]);this.showImage=e["showImage"]!==false;this.sortItems=e["sortItems"]!==false;this.uploader=s;this.itForUpload=new t.UploaderUtils.Hash;this.items=new t.UploaderUtils.Hash;this.itUploaded=new t.UploaderUtils.Hash;this.itFailed=new t.UploaderUtils.Hash;this.thumb={tagName:"LI",className:"bx-bxu-thumb-thumb"};if(!!e["thumb"]){for(var r in e["thumb"]){if(e["thumb"].hasOwnProperty(r)&&this.thumb.hasOwnProperty(r)){this.thumb[r]=e["thumb"][r]}}}t.addCustomEvent(s,"onItemIsAdded",t.delegate(this.addItem,this));t.addCustomEvent(s,"onItemsAreAdded",t.delegate(this.finishQueue,this));t.addCustomEvent(s,"onFileIsDeleted",t.delegate(this.deleteItem,this));t.addCustomEvent(s,"onFileIsReinited",t.delegate(this.reinitItem,this));this.log("Initialized");return this};t.UploaderQueue.prototype={showError:function(e){this.log("Error! "+e)},log:function(e){t.UploaderUtils.log("queue",e)},addItem:function(s,r){var d;if(!this.showImage)d=false;else if(t.type.isDomNode(s))d=t.UploaderUtils.isImage(s.value,null,null);else d=t.UploaderUtils.isImage(s["name"],s["type"],s["size"]);t.onCustomEvent(this.uploader,"onFileIsBeforeCreated",[s,r,d,this.uploader]);var a={copies:this.uploader.fileCopies,fields:this.uploader.fileFields},o=d?new t.UploaderImage(s,a,this.limits,this.uploader):new t.UploaderFile(s,a,this.limits,this.uploader),l,n,u={status:i.ready};t.onCustomEvent(o,"onFileIsAfterCreated",[o,r,u,this.uploader]);t.onCustomEvent(this.uploader,"onFileIsAfterCreated",[o,r,u,this.uploader]);this.items.setItem(o.id,o);if(r||u["status"]!==i.ready){this.itUploaded.setItem(o.id,o)}else{this.itForUpload.setItem(o.id,o)}if(!!this.placeHolder){if(t(r)){o.thumbNode=n=t(r);n.setAttribute("bx-bxu-item-id",o.id)}else{l=o.makeThumb();n=t.create(this.thumb.tagName,{attrs:{id:o.id+"Item","bx-bxu-item-id":o.id,className:this.thumb.className}});if(t.type.isNotEmptyString(l)){if(this.thumb.tagName=="TR"){l=l.replace(/[\n\t]/gi,"").replace(/^(\s+)(.*?)/gi,"$2").replace(/(.*?)(\s+)$/gi,"$1");if(!!l["trim"])l=l.trim();var h=function(e,t,i){var s=n.insertCell(-1),r={colspan:true,headers:true,accesskey:true,class:true,contenteditable:true,contextmenu:true,dir:true,hidden:true,id:true,lang:true,spellcheck:true,style:true,tabindex:true,title:true,translate:true},d;s.innerHTML=i;t=t.split(" ");while((d=t.pop())&&d){d=d.split("=");if(d.length==2){d[0]=d[0].replace(/^(\s+)(.*?)/gi,"$2").replace(/(.*?)(\s+)$/gi,"$1").replace(/^["'](.*?)["']$/gi,"$1");d[1]=d[1].replace(/^(\s+)(.*?)/gi,"$2").replace(/(.*?)(\s+)$/gi,"$1").replace(/^["'](.*?)["']$/gi,"$1");if(r[d[0]]===true)s.setAttribute(d[0],d[1]);else s[d[0]]=d[1]}}return""},p=/^<td(.*?)>(.*?)<\/td>/i;e.data1=l;while(p.test(l))l=l.replace(p,h)}else{n.innerHTML=l}}else if(t.type.isDomNode(l)){t.adjust(n,{children:[l]})}}if(!!e["jsDD"]&&this.sortItems){if(!this._onbxdragstart){this._onbxdragstart=t.delegate(this.onbxdragstart,this);this._onbxdragstop=t.delegate(this.onbxdragstop,this);this._onbxdrag=t.delegate(this.onbxdrag,this);this._onbxdraghout=t.delegate(this.onbxdraghout,this);this._onbxdestdraghover=t.delegate(this.onbxdestdraghover,this);this._onbxdestdraghout=t.delegate(this.onbxdestdraghout,this);this._onbxdestdragfinish=t.delegate(this.onbxdestdragfinish,this)}t.addClass(n,"bx-drag-draggable");n.onbxdragstart=this._onbxdragstart;n.onbxdragstop=this._onbxdragstop;n.onbxdrag=this._onbxdrag;n.onbxdraghout=this._onbxdraghout;e.jsDD.registerObject(n);n.onbxdestdraghover=this._onbxdestdraghover;n.onbxdestdraghout=this._onbxdestdraghout;n.onbxdestdragfinish=this._onbxdestdragfinish;e.jsDD.registerDest(n)}n.setAttribute("bx-item-id",o.id);if(t(r)){t.onCustomEvent(this.uploader,"onFileIsBound",[o.id,o,this.caller,r]);t.onCustomEvent(o,"onFileIsBound",[o.id,o,this.caller,r])}else if(!!r){this.placeHolder.appendChild(n);t.onCustomEvent(this.uploader,"onFileIsAttached",[o.id,o,this.caller,r]);t.onCustomEvent(o,"onFileIsAttached",[o.id,o,this.caller,r])}else{this.placeHolder.appendChild(n);t.onCustomEvent(this.uploader,"onFileIsAppended",[o.id,o,this.caller]);t.onCustomEvent(o,"onFileIsAppended",[o.id,o,this.caller])}}t.onCustomEvent(this.uploader,"onQueueIsChanged",[this,"add",o.id,o])},getItem:function(e){var i=this.items.getItem(e);if(i)return{item:i,node:i.thumbNode||t(e+"Item")};return null},onbxdragstart:function(){var e=t.proxy_context,i=e&&e.getAttribute("bx-item-id");if(i){var s=e.innerHTML.replace(new RegExp(i,"gi"),"DragCopy");e.__dragCopyDiv=t.create("DIV",{attrs:{className:"bx-drag-object "+e.className},style:{position:"absolute",zIndex:10,width:e.clientWidth+"px"},html:s});e.__dragCopyPos=t.pos(e);t.onCustomEvent(this.uploader,"onBxDragStart",[e,e.__dragCopyDiv]);document.body.appendChild(e.__dragCopyDiv);t.addClass(e,"bx-drag-source");var r=t("DragCopyProperCanvas"),d,a=this.items.getItem(i);if(r&&(a&&t(a.canvas))){d=a.canvas.cloneNode(true);r.parentNode.replaceChild(d,r);d.getContext("2d").drawImage(a.canvas,0,0)}}return true},onbxdragstop:function(){var e=t.proxy_context;if(e.__dragCopyDiv){t.removeClass(e,"bx-drag-source");e.__dragCopyDiv.parentNode.removeChild(e.__dragCopyDiv);e.__dragCopyDiv=null;delete e["__dragCopyDiv"];delete e["__dragCopyPos"]}return true},onbxdrag:function(e,i){var s=t.proxy_context,r=s.__dragCopyDiv;if(r){if(s.__dragCopyPos){if(!s.__dragCopyPos.deltaX)s.__dragCopyPos.deltaX=s.__dragCopyPos.left-e;if(!s.__dragCopyPos.deltaY)s.__dragCopyPos.deltaY=s.__dragCopyPos.top-i;e+=s.__dragCopyPos.deltaX;i+=s.__dragCopyPos.deltaY}r.style.left=e+"px";r.style.top=i+"px"}},onbxdraghout:function(e,t,i){},onbxdestdraghover:function(e){if(!e||!e.hasAttribute("bx-bxu-item-id")||!this.items.hasItem(e.getAttribute("bx-bxu-item-id")))return;var i=t.proxy_context;t.addClass(i,"bx-drag-over");return true},onbxdestdraghout:function(){var e=t.proxy_context;t.removeClass(e,"bx-drag-over");return true},onbxdestdragfinish:function(e){var i=t.proxy_context;t.removeClass(i,"bx-drag-over");if(i==e||!t.hasClass(e,"bx-drag-draggable"))return true;var s=e.getAttribute("bx-bxu-item-id");if(!this.items.hasItem(s))return;var r=i.parentNode,d=r.childNodes.length,a,o,l,n;for(n=0;n<d;n++){if(r.childNodes[n]==i)i.number=n;else if(r.childNodes[n]==e)e.number=n;if(e.number>0&&i.number>0)break}if(this.itForUpload.hasItem(s)){a=i.number<=e.number?"beforeItem":i.nextSibling?"afterItem":"inTheEnd";o=null;if(a!="inTheEnd"){for(n=i.number+(a=="beforeItem"?0:1);n<d;n++){if(this.itForUpload.hasItem(r.childNodes[n].getAttribute("bx-bxu-item-id"))){o=r.childNodes[n].getAttribute("bx-bxu-item-id");break}}if(o===null)a="inTheEnd"}l=this.itForUpload.removeItem(e.getAttribute("bx-bxu-item-id"));if(a!="inTheEnd")this.itForUpload.insertBeforeItem(l.id,l,o);else this.itForUpload.setItem(l.id,l)}a=i.number<=e.number?"beforeItem":i.nextSibling?"afterItem":"inTheEnd";o=null;if(a!="inTheEnd"){for(n=i.number+(a=="beforeItem"?0:1);n<d;n++){if(this.items.hasItem(r.childNodes[n].getAttribute("bx-bxu-item-id"))){o=r.childNodes[n].getAttribute("bx-bxu-item-id");break}}if(o===null)a="inTheEnd"}l=this.items.removeItem(e.getAttribute("bx-bxu-item-id"));if(a!="inTheEnd")this.items.insertBeforeItem(l.id,l,o);else this.items.setItem(l.id,l);e.parentNode.removeChild(e);if(i.number<=e.number){i.parentNode.insertBefore(e,i)}else if(i.nextSibling){i.parentNode.insertBefore(e,i.nextSibling)}else{for(n=0;n<d;n++){if(r.childNodes[n]==i)i.number=n;else if(r.childNodes[n]==e)e.number=n}if(i.number<=e.number){i.parentNode.insertBefore(e,i)}else{i.parentNode.appendChild(e)}}t.onCustomEvent(i,"onFileOrderIsChanged",[i.id,i,this.caller]);t.onCustomEvent(this.uploader,"onQueueIsChanged",[this,"sort",i.id,i]);return true},deleteItem:function(i,s){var r=this.getItem(i),d;if(r&&(!this.placeHolder||(d=r.node)&&d)){if(!!d){if(!!e["jsDD"]){d.onmousedown=null;d.onbxdragstart=null;d.onbxdragstop=null;d.onbxdrag=null;d.onbxdraghout=null;d.onbxdestdraghover=null;d.onbxdestdraghout=null;d.onbxdestdragfinish=null;d.__bxpos=null;e.jsDD.arObjects[d.__bxddid]=null;delete e.jsDD.arObjects[d.__bxddid];e.jsDD.arDestinations[d.__bxddeid]=null;delete e.jsDD.arDestinations[d.__bxddeid]}t.unbindAll(d);if(s["replaced"]!==true)d.parentNode.removeChild(d)}this.items.removeItem(i);this.itUploaded.removeItem(i);this.itFailed.removeItem(i);this.itForUpload.removeItem(i);t.onCustomEvent(this.uploader,"onQueueIsChanged",[this,"delete",i,s]);return true}return false},reinitItem:function(i,s){var r,d;if(!!this.placeHolder&&this.items.hasItem(i)&&(r=t(i+"Item"))&&r){d=s.makeThumb();if(t.type.isNotEmptyString(d)){if(this.thumb.tagName=="TR"){d=d.replace(/[\n\t]/gi,"").replace(/^(\s+)(.*?)/gi,"$2").replace(/(.*?)(\s+)$/gi,"$1");if(!!d["trim"])d=d.trim();var a=function(e,t,i){var s=r.insertCell(-1),d={colspan:true,headers:true,accesskey:true,class:true,contenteditable:true,contextmenu:true,dir:true,hidden:true,id:true,lang:true,spellcheck:true,style:true,tabindex:true,title:true,translate:true},a;s.innerHTML=i;t=t.split(" ");while((a=t.pop())&&a){a=a.split("=");if(a.length==2){a[0]=a[0].replace(/^(\s+)(.*?)/gi,"$2").replace(/(.*?)(\s+)$/gi,"$1").replace(/^["'](.*?)["']$/gi,"$1");a[1]=a[1].replace(/^(\s+)(.*?)/gi,"$2").replace(/(.*?)(\s+)$/gi,"$1").replace(/^["'](.*?)["']$/gi,"$1");if(d[a[0]]===true)s.setAttribute(a[0],a[1]);else s[a[0]]=a[1]}}return""},o=/^<td(.*?)>(.*?)<\/td>/i;e.data1=d;while(o.test(d))d=d.replace(o,a)}else{r.innerHTML=d}}else if(t.type.isDomNode(d)){while(t(r.firstChild)){t.remove(r.firstChild)}t.adjust(r,{children:[d]})}t.onCustomEvent(this.uploader,"onFileIsAppended",[s.id,s,this.caller]);t.onCustomEvent(s,"onFileIsAppended",[s.id,s,this.caller])}},finishQueue:function(){},clear:function(){var e;while((e=this.items.getFirst())&&!!e)this.deleteItem(e.id,e)},restoreFiles:function(e,i,s){i=i===true;var r=e.getFirst();while(r){if(this.items.hasItem(r.id)&&(s===true||!this.itUploaded.hasItem(r.id))&&(i||!this.itFailed.hasItem(r.id))){if(this.itFailed.hasItem(r.id)||s===true){delete r["uploadStatus"];delete r.file["uploadStatus"];delete r.file["firstChunk"];delete r.file["package"];delete r.file["packages"];if(r.file["copies"]){r.file["copies"].reset();var d;while((d=r.file["copies"].getNext())&&d){delete d["uploadStatus"];delete d["firstChunk"];delete d["package"];delete d["packages"]}r.file["copies"].reset()}r["restored"]="Y"}else{r["restored"]="C"}this.itFailed.removeItem(r.id);this.itUploaded.removeItem(r.id);this.itForUpload.setItem(r.id,r);t.onCustomEvent(r,"onUploadRestore",[r])}r=e.getNext()}}};return i})(window);
/* End */
;